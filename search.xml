<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git上传项目到gitee/github</title>
    <url>/2018/03/18/git%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0gitee%E6%88%96github/</url>
    <content><![CDATA[<h1 id="使用git上传项目"><a href="#使用git上传项目" class="headerlink" title="使用git上传项目"></a>使用<code>git</code>上传项目</h1><h2 id="初始化本地git仓库"><a href="#初始化本地git仓库" class="headerlink" title="初始化本地git仓库"></a>初始化本地<code>git</code>仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到你的本地项目根目录下，执行git init初始化命令</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="将本地项目工作区的所有文件添加到暂存区"><a href="#将本地项目工作区的所有文件添加到暂存区" class="headerlink" title="将本地项目工作区的所有文件添加到暂存区"></a>将本地项目工作区的<code>所有文件</code>添加到暂存区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .    // . 表示所有文件, 如果想添加项目中的指定文件，那就把 . 改为指定文件名即可</span><br></pre></td></tr></table></figure>
<h2 id="将暂存区的文件提交到本地仓库"><a href="#将暂存区的文件提交到本地仓库" class="headerlink" title="将暂存区的文件提交到本地仓库"></a>将暂存区的文件提交到本地仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;提交项目名称&quot;   //冒号里面写注释语句。例如:git commit -m &quot;init project&quot;</span><br></pre></td></tr></table></figure>
<h2 id="在码云-Github上创建自己的项目，创建如图所示"><a href="#在码云-Github上创建自己的项目，创建如图所示" class="headerlink" title="在码云/Github上创建自己的项目，创建如图所示"></a>在<code>码云/Github</code>上创建自己的项目，创建如图所示</h2><ol>
<li>新建仓库<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623144952.png" alt="image-20210623144952"></li>
<li>创建仓库(开源或私有请自行配置。<span style="color:red">这里的图片是使用的搭建图床时的图片</span>)<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623020143.png" alt="image-20210623020143"><h2 id="将本地仓库关联到码云上"><a href="#将本地仓库关联到码云上" class="headerlink" title="将本地仓库关联到码云上"></a>将本地仓库关联到码云上</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin 你新创的仓库的地址 </span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>如果有报错：</strong></p>
<blockquote>
<p>在这一步时如果出现错误：<code>fatal:remote origin already exists</code> 意思是路径存在了，就需要删除原来的路径从新添加</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">那就先输入  git remote rm origin // 删除原来的路径</span><br><span class="line">再输入     git remote add origin 你新创的仓库的地址  // 从新添加仓库</span><br></pre></td></tr></table></figure>
<h2 id="最后一步，将代码由本地仓库上传到gitee远程仓库"><a href="#最后一步，将代码由本地仓库上传到gitee远程仓库" class="headerlink" title="最后一步，将代码由本地仓库上传到gitee远程仓库"></a>最后一步，将代码由本地仓库上传到<code>gitee</code>远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h1 id="git常用的命令"><a href="#git常用的命令" class="headerlink" title="git常用的命令"></a><code>git</code>常用的命令</h1><ul>
<li>切换分支：git checkout name</li>
<li>撤销修改：git checkout – file</li>
<li>删除文件：git rm file</li>
<li>查看状态：git status</li>
<li>添加记录：git add file 或 git add .</li>
<li>添加描述：git commit -m “描述内容”</li>
<li>同步数据：git pull</li>
<li>提交数据：git push origin name</li>
</ul>
<p><strong>分支操作</strong></p>
<ul>
<li>查看分支：git branch</li>
<li>创建分支：git branch name</li>
<li>切换分支：git checkout name</li>
<li>创建+切换分支：git checkout -b name</li>
<li>合并某分支到当前分支：git merge name</li>
<li>删除分支：git branch -d name</li>
<li>删除远程分支：git push origin :name</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Vant组件库的基本使用</title>
    <url>/2021/08/29/Vant%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Vant组件库介绍"><a href="#Vant组件库介绍" class="headerlink" title="Vant组件库介绍"></a><code>Vant</code>组件库介绍</h1><p><code>Vant</code>是有赞前端团队开源的移动端组件库，于2017年开源，已持续维护4年时间。<code>Vant</code>对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的<strong>移动端</strong>组件库之一。<br><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/">Vant官网</a></p>
<span id="more"></span>
<h1 id="Vant开发指南"><a href="#Vant开发指南" class="headerlink" title="Vant开发指南"></a><code>Vant</code>开发指南</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol>
<li><p>使用<code>vue create 项目名称</code>(<code>vue create vant-use</code>)</p>
</li>
<li><p>选择手动配置特性<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/Vant%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20210829180223431.png" alt="image-20210829180223431"></p>
</li>
<li><p>只选择<code>版本号</code>和<code>Babel</code><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/Vant%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20210829180323066.png" alt="image-20210829180323066"></p>
</li>
<li><p>选择<code>vue2</code>的版本<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/Vant%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20210829180428692.png" alt="image-20210829180428692"></p>
</li>
<li><p>单独生成配置文件<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/Vant%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20210829180614409.png" alt="image-20210829180614409"></p>
</li>
<li><p>进入到当前项目中并运行项目，查看项目是否能正常运行</p>
</li>
<li><p>删除多余代码</p>
<h2 id="整理目录结构"><a href="#整理目录结构" class="headerlink" title="整理目录结构"></a>整理目录结构</h2><p>在<code>assets</code>下创建<code>css/images</code>等文件夹。</p>
<h2 id="rem适配"><a href="#rem适配" class="headerlink" title="rem适配"></a><code>rem</code>适配</h2><p>在<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/">Vant官网</a>下的<code>进阶用法</code>中找到<code>Rem 布局适配</code>，并进行如下配置:</p>
</li>
<li><p>安装<code>postcss-pxtorem</code>插件(下载@5.1.1版本，其他版本报错)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install postcss-pxtorem@5.1.1 --save-dev</span><br></pre></td></tr></table></figure></li>
<li><p>在当前项目中创建<code>postcss.config.js</code>文件，并加入如下代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// postcss.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    &#x27;postcss-pxtorem&#x27;: &#123;</span><br><span class="line">      // 设置根元素html的字体大小，是根据设计图而定的，如果设计图是750px，则rootValue = 75。如果设计图是720px，则rootValue = 72.如果设计图是1080px，则rootValue = 108。如果设计图是375x，则rootValue = 37.5。也就是说设计稿的宽度 / 10，就是根元素的字体大小。本项目采用的是750px的设计图</span><br><span class="line">      rootValue: 75,</span><br><span class="line">      propList: [&#x27;*&#x27;],</span><br><span class="line">      // 排除node_modules文件夹，这里必须写</span><br><span class="line">      exclude: /node_modules/i,</span><br><span class="line">      // 过滤掉以vant-开头的元素选择器，和以.my-开头的类选择器，如果不想让某些标签的px转换为rem，那么就在该标签上加上.my-类名，这里也必须得配置</span><br><span class="line">      selectorBlackList: [&#x27;vant-&#x27;,&#x27;.my&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>安装<code>amfe-flexible</code>(@2.2.1)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -S amfe-flexible@2.2.1</span><br></pre></td></tr></table></figure></li>
<li><p>在该项目中的<code>public/index.html</code>文件中把下列代码替换掉原有的<code>meta</code>标签:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在该项目中的<code>main.js</code>文件中引入下列代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//H5 rem适配</span><br><span class="line">import &#x27;amfe-flexible&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>在项目中直接使用<code>px</code>即可，不需要自己去算，也不需要自己在设置<code>html</code>字体大小了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.title &#123;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意，如果是行内样式，则不会进行适配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 class=&quot;title&quot; style=&quot;font-size: 55px;&quot;&gt;这是标题&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<h2 id="导入vant组件库"><a href="#导入vant组件库" class="headerlink" title="导入vant组件库"></a>导入<code>vant</code>组件库</h2></li>
<li><p>先下载</p>
</li>
<li><p>后引入</p>
<h3 id="下载vant组件"><a href="#下载vant组件" class="headerlink" title="下载vant组件"></a>下载<code>vant</code>组件</h3></li>
<li><p>如果不清楚安装的哪个版本，直接到<code>package.json</code>中查看<code>vue</code>的版本号</p>
</li>
<li><p>通过<code>npm</code>下载<code>vant</code>组件(因为我们开始的时候使用的是vue@2的版本，所以我们使用第一种安装方式)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一：</span><br><span class="line"># Vue 2 项目，安装 Vant 2：</span><br><span class="line">npm i vant -S</span><br><span class="line"></span><br><span class="line"># 方式二：</span><br><span class="line"># Vue 3 项目，安装 Vant 3：</span><br><span class="line">npm i vant@next -S</span><br></pre></td></tr></table></figure>
<h3 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h3></li>
<li><p>方式一：自动按需引入组件(特别推荐)<br> 这种方式需要依赖<code>babel-plugin-import</code>插件</p>
<ul>
<li>安装<code>babel-plugin-import</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-import -D</span><br></pre></td></tr></table></figure></li>
<li>使用<code>vue-cli2</code>创建的项目<br>&lt;span style=”color:red;&gt;注意：该配置为<code>vue-cli2</code>中的配置</span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果使用vue-cli2创建的项目则在.babelrc中加入下列代码</span><br><span class="line">// 在.babelrc 中添加配置</span><br><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [&quot;import&quot;, &#123;</span><br><span class="line">      &quot;libraryName&quot;: &quot;vant&quot;,</span><br><span class="line">      &quot;libraryDirectory&quot;: &quot;es&quot;,</span><br><span class="line">      &quot;style&quot;: true</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用<code>vue-cli3</code>创建的项目<br>&lt;span style=”color:red;&gt;注意：该配置为<code>vue-cli3</code>中的配置</span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对于使用 babel7 的用户，可以在 babel.config.js 中配置</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [&#x27;import&#x27;, &#123;</span><br><span class="line">      libraryName: &#x27;vant&#x27;,</span><br><span class="line">      libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">      style: true</span><br><span class="line">    &#125;, &#x27;vant&#x27;]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>在<code>main.js</code>中引入需要的组件(不再需要引入<code>css</code>代码了)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Button &#125; from &#x27;vant&#x27;;</span><br><span class="line">Vue.use(Button)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式二：手动按需引入组件(推荐)<br>在不使用插件的情况下，可以手动引入需要的组件。每个元素只要引入一次，就能在每个页面中都能使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># main.js中引入</span><br><span class="line">import Button from &#x27;vant/lib/button&#x27;;</span><br><span class="line">import &#x27;vant/lib/button/style&#x27;; </span><br><span class="line">Vue.use(Button)</span><br></pre></td></tr></table></figure></li>
<li><p>方式三： 导入所有组件(但是这种方式方便)<br><code>Vant</code>支持一次性导入所有组件，引入所有组件会<strong>增加代码包体积</strong>，因此不推荐这种做法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># main.js中引入</span><br><span class="line">import Vant from &#x27;vant&#x27;;</span><br><span class="line">import &#x27;vant/lib/index.css&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vant);</span><br></pre></td></tr></table></figure>
<h2 id="定制主题"><a href="#定制主题" class="headerlink" title="定制主题"></a>定制主题</h2><p>Vant 使用了<code>Less</code>对样式进行预处理，并内置了一些样式变量，通过替换样式变量即可定制你自己需要的主题。</p>
</li>
<li><p>安装<code>less less-loader</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="利用autoprefixer为css规则添加特定厂商的前缀"><a href="#利用autoprefixer为css规则添加特定厂商的前缀" class="headerlink" title="利用autoprefixer为css规则添加特定厂商的前缀"></a>利用<code>autoprefixer</code>为<code>css</code>规则添加特定厂商的前缀</h2><p><a href="https://www.postcss.com.cn/">postcss官网</a></p>
<ol>
<li><p>安装<code>autoprefixer</code>插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install autoprefixer@9.8.6 --save-dev</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>postcss.config.js</code>文件中进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  # postcss.config.js中配置</span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      # autoprefixer的配置</span><br><span class="line">      &quot;autoprefixer&quot;: &#123;</span><br><span class="line">        &quot;overrideBrowserslist&quot;: [</span><br><span class="line">          # 下面的是移动端页面配置</span><br><span class="line">          &quot;ie &gt;= 8&quot;,        //兼容ie7以上的浏览器</span><br><span class="line">          &quot;Firefox &gt;= 3.5&quot;, // 兼容火狐版本号大于3.5浏览器</span><br><span class="line">          &quot;chrome &gt;= 35&quot;,   //兼容谷歌版本号大于35浏览器</span><br><span class="line">          &quot;opera &gt;= 11.5&quot;   // 兼容欧朋版本号大于11.5浏览器</span><br><span class="line">          # 这里是ios和Android配置</span><br><span class="line">          &quot;Android &gt;= 4.0&quot;,</span><br><span class="line">          &quot;iOS &gt;= 8&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x27;postcss-pxtorem&#x27;: &#123;</span><br><span class="line">        rootValue: 75,</span><br><span class="line">        propList: [&#x27;*&#x27;],</span><br><span class="line">        exclude: /node_modules/i,</span><br><span class="line">        selectorBlackList: [&#x27;vant-&#x27;,&#x27;.my&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ```  </span><br><span class="line">3. 在组件中直接写代码即可，浏览器会自动识别哪些代码需要添加前缀  </span><br><span class="line">## 插槽的使用</span><br><span class="line">1. </span><br><span class="line">## 风格指南</span><br><span class="line">1. 组件数据</span><br><span class="line">  组件的`data`必须是一个函数。</span><br></pre></td></tr></table></figure>
<p>export default {<br> data() {<br>   return {</p>
<pre><code> foo: &#39;bar&#39;,
</code></pre>
<p>   };<br> },<br>};</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 单文件组件文件名称</span><br><span class="line">  单文件组件的文件名应该要么始终是单词大写开头(`PascalCase`)，要么始终是横线连接(`kebab-case`)。</span><br></pre></td></tr></table></figure>
<p>MyComponent.vue<br>my-component.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 紧密耦合的组件名</span><br><span class="line">  和父组件紧密耦合的子组件应该以父组件名作为前缀命名。</span><br></pre></td></tr></table></figure>
<p>components<br> |- TodoList.vue</p>
<pre><code>|- TodoListItem.vue
   └─ TodoListItemButton.vue
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 自闭合组件</span><br><span class="line">  在单文件组件中没有内容的组件应该是自闭合的。</span><br></pre></td></tr></table></figure>
<h1 id="有内容时"><a href="#有内容时" class="headerlink" title="有内容时"></a>有内容时</h1><p><my-component>内容xxx</my-component></p>
<h1 id="没有内容时"><a href="#没有内容时" class="headerlink" title="没有内容时"></a>没有内容时</h1><my-component />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. Prop 名大小写</span><br><span class="line">  在声明`prop`的时候，其命名应该始终使用`camelCase`，而在模板中应该始终使用`kebab-case`。</span><br></pre></td></tr></table></figure>
export default {
 props: {
   greetingText: String,
 },
};
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6. 指令缩写</span><br><span class="line">  指令缩写，用 `:表示v-bind:`，用 `@表示v-on:` </span><br></pre></td></tr></table></figure>
<input :value="value" @input="onInput" />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7. Props顺序</span><br><span class="line">  标签的`Props`应该有统一的顺序，依次为**指令、属性和事件**。</span><br></pre></td></tr></table></figure>
<my-component
 v-if="if"
 v-show="show"
 v-model="value"
 ref="ref"
 :key="key"
 :text="text"
 @input="onInput"
 @change="onChange"
/>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8. 组件选项的顺序</span><br><span class="line">  组件选项应该有统一的顺序。</span><br></pre></td></tr></table></figure>
# 按照规范，之间有一行空格
export default {
 name: '',

<p> mixins: [],</p>
<p> components: {},</p>
<p> props: {},</p>
<p> data() {},</p>
<p> computed: {},</p>
<p> watch: {},</p>
<p> created() {},</p>
<p> mounted() {},</p>
<p> destroyed() {},</p>
<p> methods: {},<br>};</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9. 组件选项中的空行</span><br><span class="line">  组件选项较多时，建议在属性之间添加空行。</span><br></pre></td></tr></table></figure>
<p>export default {<br> computed: {<br>   formattedValue() {</p>
<pre><code> // ...
</code></pre>
<p>   },</p>
<p>   styles() {</p>
<pre><code> // ...
</code></pre>
<p>   },<br> },</p>
<p> methods: {<br>   onInput() {</p>
<pre><code> // ...
</code></pre>
<p>   },</p>
<p>   onChange() {</p>
<pre><code> // ...
</code></pre>
<p>   },<br> },<br>};</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10. 单文件组件顶级标签的顺序</span><br><span class="line">  单文件组件应该总是让顶级标签的顺序保持一致，且标签之间留有空行。</span><br></pre></td></tr></table></figure>
<template>
 ...
</template></li>
</ol>
  <script>
    /* ... */
  </script>

  <style>
    /* ... */
  </style>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># `Vant`基础组件</span><br><span class="line">## `Button`按钮</span><br><span class="line">  按钮用于触发一个操作，如提交表单。</span><br><span class="line">1. 引入</span><br></pre></td></tr></table></figure>
<p>  import { Button } from ‘vant’;</p>
<p>  Vue.use(Button);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 按钮类型</span><br><span class="line">  按钮支持`default、primary、info、warning、danger`五种类型，默认为`default`。</span><br></pre></td></tr></table></figure><br>  <van-button type="primary">主要按钮</van-button><br>  <van-button type="info">信息按钮</van-button><br>  <van-button type="default">默认按钮</van-button><br>  <van-button type="warning">警告按钮</van-button><br>  <van-button type="danger">危险按钮</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 朴素按钮</span><br><span class="line">  通过`plain`属性将按钮设置为朴素按钮，朴素按钮的文字为按钮颜色，背景为白色。</span><br></pre></td></tr></table></figure><br>  <van-button plain type="primary">朴素按钮</van-button><br>  <van-button plain type="info">朴素按钮</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 细边框</span><br><span class="line">  设置`hairline`属性可以展示`0.5px`的细边框。  </span><br></pre></td></tr></table></figure><br>  <van-button plain hairline type="primary">细边框按钮</van-button><br>  <van-button plain hairline type="info">细边框按钮</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 禁用状态</span><br><span class="line">  通过`disabled`属性来禁用按钮，禁用状态下按钮不可点击。  </span><br></pre></td></tr></table></figure><br>  <van-button disabled type="primary">禁用状态</van-button><br>  <van-button disabled type="info">禁用状态</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6. 加载状态</span><br><span class="line">  通过`loading`属性设置按钮为加载状态，加载状态下默认会隐藏按钮文字，可以通过`loading-text`设置加载状态下的文字。  </span><br></pre></td></tr></table></figure><br>  <van-button loading type="primary" /><br>  <van-button loading type="primary" loading-type="spinner" /><br>  <van-button loading type="info" loading-text="加载中..." /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7. 按钮形状</span><br><span class="line">  通过`square`设置方形按钮，通过`round`设置圆形按钮。</span><br></pre></td></tr></table></figure><br>  <van-button square type="primary">方形按钮</van-button><br>  <van-button round type="info">圆形按钮</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8. 图标按钮</span><br><span class="line">  通过 `icon` 属性设置按钮图标，支持 `Icon` 组件里的所有图标，也可以传入图标 `URL。`  </span><br></pre></td></tr></table></figure><br>  <van-button icon="plus" type="primary" /><br>  <van-button icon="plus" type="primary">按钮</van-button><br>  <van-button icon="https://img01.yzcdn.cn/vant/user-active.png" type="info"><br>    按钮<br>  </van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9. 按钮尺寸</span><br><span class="line">  支持 `large、normal、small、mini` 四种尺寸，默认为 `normal。`  </span><br></pre></td></tr></table></figure><br>  <van-button type="primary" size="large">大号按钮</van-button><br>  <van-button type="primary" size="normal">普通按钮</van-button><br>  <van-button type="primary" size="small">小型按钮</van-button><br>  <van-button type="primary" size="mini">迷你按钮</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10. 块级元素</span><br><span class="line">  按钮在默认情况下为行内块级元素，通过 `block` 属性可以将按钮的元素类型设置为块级元素。</span><br></pre></td></tr></table></figure><br>  <van-button type="primary" block>块级元素</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11. 页面导航</span><br><span class="line">  可以通过 `url` 属性进行 `URL` 跳转，或通过 `to` 属性进行路由跳转。</span><br></pre></td></tr></table></figure><br>  <van-button type="primary" url="/vant/mobile.html">URL 跳转</van-button><br>  <van-button type="primary" to="index">路由跳转</van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12. 自定义颜色</span><br><span class="line">  通过 `color` 属性可以自定义按钮的颜色。</span><br></pre></td></tr></table></figure><br>  <van-button color="#7232dd">单色按钮</van-button><br>  <van-button color="#7232dd" plain>单色按钮</van-button><br>  <van-button color="linear-gradient(to right, #ff6034, #ee0a24)"><br>    渐变色按钮<br>  </van-button><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13. `API`</span><br><span class="line">14. `Events`事件  </span><br><span class="line">15. `Slots`</span><br><span class="line">16. 样式变量</span><br><span class="line">## `Cell`单元格</span><br><span class="line">  单元格为列表中的单个展示项。</span><br><span class="line">1. 引入</span><br></pre></td></tr></table></figure><br>  import { Cell, CellGroup } from ‘vant’;</p>
<p>  Vue.use(Cell);<br>  Vue.use(CellGroup)<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 基础用法</span><br><span class="line">  Cell 可以单独使用，也可以与 `CellGroup` 搭配使用，`CellGroup` 可以为 `Cell` 提供上下外边框。</span><br></pre></td></tr></table></figure><br>  <van-cell-group><br>    <van-cell title="单元格" value="内容" /><br>    <van-cell title="单元格" value="内容" label="描述信息" /><br>  </van-cell-group><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 卡片风格</span><br><span class="line">  通过 `CellGroup` 的 `inset` 属性，可以将单元格转换为圆角卡片风格（从 2.12.25 版本开始支持）。</span><br></pre></td></tr></table></figure><br>  <van-cell-group inset><br>    <van-cell title="单元格" value="内容" /><br>    <van-cell title="单元格" value="内容" label="描述信息" /><br>  </van-cell-group><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 单元格大小</span><br><span class="line">  通过 `size` 属性可以控制单元格的大小。</span><br></pre></td></tr></table></figure><br>  <van-cell title="单元格" value="内容" size="large" /><br>  <van-cell title="单元格" value="内容" size="large" label="描述信息" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 展示图标</span><br><span class="line">  通过 `icon` 属性在标题左侧展示图标。</span><br></pre></td></tr></table></figure><br>  <van-cell title="单元格" icon="location-o" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6. 只设置 value</span><br><span class="line">  只设置 `value` 时，内容会靠左对齐。</span><br></pre></td></tr></table></figure><br>  <van-cell value="内容" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7. 展示箭头</span><br><span class="line">  设置 `is-link` 属性后会在单元格右侧显示箭头，并且可以通过 `arrow-direction` 属性控制箭头方向。</span><br></pre></td></tr></table></figure><br>  <van-cell title="单元格" is-link /><br>  <van-cell title="单元格" is-link value="内容" /><br>  <van-cell title="单元格" is-link arrow-direction="down" value="内容" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8. 页面导航</span><br><span class="line">  可以通过 `url` 属性进行 `URL` 跳转，或通过 `to` 属性进行路由跳转。</span><br></pre></td></tr></table></figure><br>  <van-cell title="URL 跳转" is-link url="/vant/mobile.html" /><br>  <van-cell title="路由跳转" is-link to="index" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9. 分组标题</span><br><span class="line">  通过 `CellGroup` 的 `title` 属性可以指定分组标题。</span><br></pre></td></tr></table></figure><br>  <van-cell-group title="分组1"><br>    <van-cell title="单元格" value="内容" /><br>  </van-cell-group><br>  <van-cell-group title="分组2"><br>    <van-cell title="单元格" value="内容" /><br>  </van-cell-group><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10. 使用插槽</span><br><span class="line">  如以上用法不能满足你的需求，可以使用插槽来自定义内容。</span><br></pre></td></tr></table></figure><br>  <van-cell value="内容" is-link><br>    <!-- 使用 title 插槽来自定义标题 --><br>    &lt;template #title&gt;<br>      <span class="custom-title">单元格</span><br>      <van-tag type="danger">标签</van-tag><br>    </template><br>  </van-cell></p>
  <van-cell title="单元格" icon="shop-o">
    <!-- 使用 right-icon 插槽来自定义右侧图标 -->
    <template #right-icon>
      <van-icon name="search" class="search-icon" />
    </template>
  </van-cell>

  <style>
    .custom-title {
      margin-right: 4px;
      vertical-align: middle;
    }

    .search-icon {
      font-size: 16px;
      line-height: inherit;
    }
  </style>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11. 垂直居中</span><br><span class="line">  通过 `center` 属性可以让 `Cell` 的左右内容都垂直居中。</span><br></pre></td></tr></table></figure>
  <van-cell center title="单元格" value="内容" label="描述信息" />
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12. `API`</span><br><span class="line">13. `Cell Props`</span><br><span class="line">14. `Cell Events`</span><br><span class="line">15. `CellGroup Slots`</span><br><span class="line">16. `Cell Slots`</span><br><span class="line">17. `样式变量`</span><br><span class="line">## `Icon` 图标</span><br><span class="line">  基于字体的图标集，可以通过 `Icon` 组件使用，也可以在其他组件中通过 `icon` 属性引用。</span><br><span class="line">1. 引入</span><br></pre></td></tr></table></figure>
  import { Icon } from 'vant';

<p>  Vue.use(Icon);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 基础用法</span><br><span class="line">  `Icon` 的 `name` 属性支持传入图标名称或图片链接，所有可用的图标名称见右侧示例。</span><br></pre></td></tr></table></figure><br>  <van-icon name="chat-o" /><br>  <van-icon name="https://b.yzcdn.cn/vant/icon-demo-1126.png" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 徽标提示</span><br><span class="line">  设置 `dot` 属性后，会在图标右上角展示一个小红点；设置 `badge` 属性后，会在图标右上角展示相应的徽标。</span><br></pre></td></tr></table></figure><br>  <van-icon name="chat-o" dot /><br>  <van-icon name="chat-o" badge="9" /><br>  <van-icon name="chat-o" badge="99+" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 图标颜色</span><br><span class="line">  `Icon` 的 `color` 属性用来设置图标的颜色。</span><br></pre></td></tr></table></figure><br>  <van-icon name="cart-o" color="#1989fa" /><br>  <van-icon name="fire-o" color="#ee0a24" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 图标大小</span><br><span class="line">  `Icon 的 size` 属性用来设置图标的尺寸大小，默认单位为 `px。`</span><br></pre></td></tr></table></figure><br>  <van-icon name="chat-o" size="40" /> <van-icon name="chat-o" size="3rem" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6. 使用本地字体文件</span><br><span class="line">  `Icon` 组件默认引用有赞 `CDN` 提供的字体文件，并通过网络下载。如果需要在项目中使用本地字体文件，请引入下面的 `CSS` 文件，并在项目中配置 `url-loader`。</span><br></pre></td></tr></table></figure><br>  import ‘vant/lib/icon/local.css’;<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7. 自定义图标</span><br><span class="line">  如果需要在现有 `Icon` 的基础上使用更多图标，可以引入第三方 `iconfont` 对应的字体文件和 `CSS` 文件，之后就可以在 `Icon` 组件中直接使用。</span><br></pre></td></tr></table></figure><br>  /* 引入第三方或自定义的字体图标样式 */<br>  @font-face {<br>    font-family: ‘my-icon’;<br>    src: url(‘./my-icon.ttf’) format(‘truetype’);<br>  }</p>
<p>  .my-icon {<br>    font-family: ‘my-icon’;<br>  }</p>
<p>  .my-icon-extra::before {<br>    content: ‘\e626’;<br>  }</p>
  <!-- 通过 class-prefix 指定类名为 my-icon -->
  <van-icon class-prefix="my-icon" name="extra" />
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8. `API`</span><br><span class="line">9. `Events`事件</span><br><span class="line">## `Image` 图片</span><br><span class="line">  增强版的 `img` 标签，提供多种图片填充模式，支持图片懒加载、加载中提示、加载失败提示。</span><br><span class="line">1. 引入</span><br></pre></td></tr></table></figure>
  import { Image as VanImage } from 'vant';

<p>  Vue.use(VanImage);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 基础用法</span><br><span class="line">  基础用法与原生 `img` 标签一致，可以设置 `src、width、height、alt` 等原生属性。</span><br></pre></td></tr></table></figure><br>  <van-image
    width="100"
    height="100"
    src="https://img01.yzcdn.cn/vant/cat.jpeg"
  /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 填充模式</span><br><span class="line">  通过 `fit` 属性可以设置图片填充模式，可选值见下方表格。</span><br></pre></td></tr></table></figure><br>  <van-image
    width="10rem"
    height="10rem"
    fit="contain"
    src="https://img01.yzcdn.cn/vant/cat.jpeg"
  /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 圆形图片</span><br><span class="line">  通过 `round` 属性可以设置图片变圆，注意当图片宽高不相等且 `fit` 为 `contain` 或 `scale-down` 时，将无法填充一个完整的圆形。</span><br></pre></td></tr></table></figure><br>  <van-image
    round
    width="10rem"
    height="10rem"
    src="https://img01.yzcdn.cn/vant/cat.jpeg"
  /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 图片懒加载</span><br><span class="line">  设置 `lazy-load` 属性来开启图片懒加载，需要搭配 `Lazyload` 组件使用。</span><br></pre></td></tr></table></figure></p>
<h1 id="main-js中引入"><a href="#main-js中引入" class="headerlink" title="main.js中引入"></a>main.js中引入</h1><p>  import { Lazyload } from ‘vant’;</p>
<p>  Vue.use(Lazyload);</p>
<h1 id="页面中引入"><a href="#页面中引入" class="headerlink" title="页面中引入"></a>页面中引入</h1><p>  <van-image
    width="100"
    height="100"
    lazy-load
    src="https://img01.yzcdn.cn/vant/cat.jpeg"
  /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6. 加载中提示</span><br><span class="line">  `Image` 组件提供了默认的加载中提示，支持通过 `loading` 插槽自定义内容。</span><br></pre></td></tr></table></figure><br>  <van-image src="https://img01.yzcdn.cn/vant/cat.jpeg"><br>    <template v-slot:loading><br>      <van-loading type="spinner" size="20" /><br>    </template><br>  </van-image><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7. 加载失败提示</span><br><span class="line">  `Image` 组件提供了默认的加载失败提示，支持通过 `error` 插槽自定义内容。</span><br></pre></td></tr></table></figure><br>  <van-image src="https://img01.yzcdn.cn/vant/cat.jpeg"><br>    <template v-slot:error>加载失败</template><br>  </van-image><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8. `API`</span><br><span class="line">9. 图片填充模式</span><br><span class="line">10. `Events`事件</span><br><span class="line">11. `Slots`</span><br><span class="line">12. 样式变量</span><br><span class="line">13. 引用本地图片</span><br><span class="line">  在 `.vue` 文件中通过相对路径引用本地图片时，需要在图片的链接外包上一层 `require()`，将图片 `URL` 转换为 `webpack` 模块请求，并结合 `file-loader` 或者 `url-loader` 进行处理。</span><br></pre></td></tr></table></figure><br>  <van-image :src="require('./image.png')" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## `Layout`布局</span><br><span class="line">  `Layout`提供了`van-row`和`van-col`两个组件来进行行列布局。</span><br><span class="line">1. 引入</span><br></pre></td></tr></table></figure><br>  import { Col, Row } from ‘vant’;</p>
<p>  Vue.use(Col);<br>  Vue.use(Row);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 基础用法</span><br><span class="line">  `Layout` 组件提供了 **24列栅格**，通过在 `Col` 上添加 `span` 属性设置列所占的宽度百分比。此外，添加 `offset` 属性可以设置列的偏移宽度，计算方式与 `span` 相同。</span><br></pre></td></tr></table></figure><br>  <van-row><br>    <van-col span="8">span: 8</van-col><br>    <van-col span="8">span: 8</van-col><br>    <van-col span="8">span: 8</van-col><br>  </van-row></p>
  <van-row>
    <van-col span="4">span: 4</van-col>
    <van-col span="10" offset="4">offset: 4, span: 10</van-col>
  </van-row>

  <van-row>
    <van-col offset="12" span="12">offset: 12, span: 12</van-col>
  </van-row>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 设置列元素间距</span><br><span class="line">  通过 `gutter` 属性可以设置列元素之间的间距，默认间距为 0。</span><br></pre></td></tr></table></figure>
  <van-row gutter="20">
    <van-col span="8">span: 8</van-col>
    <van-col span="8">span: 8</van-col>
    <van-col span="8">span: 8</van-col>
  </van-row>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. `Flex`布局</span><br><span class="line">  将 `type` 属性设置为 `flex` 可以启用 `flex` 布局，便于进行灵活的对齐。</span><br></pre></td></tr></table></figure>
  <!-- 左对齐 -->
  <van-row type="flex">
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
  </van-row>

  <!-- 居中 -->
  <van-row type="flex" justify="center">
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
  </van-row>

  <!-- 右对齐 -->
  <van-row type="flex" justify="end">
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
  </van-row>

  <!-- 两端对齐 -->
  <van-row type="flex" justify="space-between">
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
  </van-row>

  <!-- 每个元素的两侧间隔相等 -->
  <van-row type="flex" justify="space-around">
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
    <van-col span="6">span: 6</van-col>
  </van-row>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. `API`</span><br><span class="line">6. `Row Events`</span><br><span class="line">## `Popup`弹出层</span><br><span class="line">  弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。</span><br><span class="line">1. 引入</span><br></pre></td></tr></table></figure>
  import { Popup } from 'vant';

<p>  Vue.use(Popup);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 基础用法</span><br><span class="line">  通过 `v-model` 控制弹出层是否展示。</span><br></pre></td></tr></table></figure><br>  &lt;van-cell is-link @click=”showPopup”&gt;展示弹出层</van-cell><br>  <van-popup v-model="show">内容</van-popup><br>  export default {<br>    data() {<br>      return {<br>        show: false,<br>      };<br>    },</p>
<pre><code>methods: &#123;
  showPopup() &#123;
    this.show = true;
  &#125;,
&#125;,
</code></pre>
<p>  };<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 弹出位置</span><br><span class="line">  通过 `position` 属性设置弹出位置，默认居中弹出，可以设置为 `top、bottom、left、right`。</span><br></pre></td></tr></table></figure><br>  <van-popup v-model="show" position="top" :style="{ height: '30%' }" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 关闭图标</span><br><span class="line">  设置 `closeable` 属性后，会在弹出层的右上角显示关闭图标，并且可以通过 `close-icon` 属性自定义图标，使用 `close-icon-position` 属性可以自定义图标位置。</span><br></pre></td></tr></table></figure><br>  <van-popup
    v-model="show"
    closeable
    position="bottom"
    :style="{ height: '30%' }"
  /><br>  <!-- 自定义图标 --><br>  <van-popup
    v-model="show"
    closeable
    close-icon="close"
    position="bottom"
    :style="{ height: '30%' }"
  /><br>  <!-- 图标位置 --><br>  <van-popup
    v-model="show"
    closeable
    close-icon-position="top-left"
    position="bottom"
    :style="{ height: '30%' }"
  /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 圆角弹窗</span><br><span class="line">  设置 `round` 属性后，弹窗会根据弹出位置添加不同的圆角样式。</span><br></pre></td></tr></table></figure><br>  <van-popup v-model="show" round position="bottom" :style="{ height: '30%' }" /><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6. 指定挂载位置</span><br><span class="line">  弹出层默认挂载到组件所在位置，可以通过 `get-container` 属性指定挂载位置。</span><br></pre></td></tr></table></figure><br>  <!-- 挂载到 body 节点下 --><br>  <van-popup v-model="show" get-container="body" /></p>
  <!-- 挂载到 #app 节点下 -->
  <van-popup v-model="show" get-container="#app" />

  <!-- 通过函数指定挂载位置 -->
  <van-popup v-model="show" :get-container="getContainer" />
  export default {
    methods: {
      // 返回一个特定的 DOM 节点，作为挂载的父节点
      getContainer() {
        return document.querySelector('.my-container');
      },
    },
  };
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;span style=&quot;color:red;&quot;&gt;注意：使用 `get-container` 属性的组件不能为根节点&lt;/span&gt;</span><br><span class="line">7. `API`</span><br><span class="line">8. `Events`事件</span><br><span class="line">9. 样式变量</span><br><span class="line">## 内置样式</span><br><span class="line">  `Vant` 中默认包含了一些常用样式，可以直接通过 `className` 的方式使用。</span><br><span class="line">1. 文字省略</span><br><span class="line">  当文本内容长度超过容器最大宽度时，自动省略多余的文本。</span><br></pre></td></tr></table></figure>
  <!-- 最多显示一行 -->
  <div class="van-ellipsis">这是一段最多显示一行的文字，多余的内容会被省略</div>

  <!-- 最多显示两行 -->
  <div class="van-multi-ellipsis--l2">
    这是一段最多显示两行的文字，多余的内容会被省略
  </div>

  <!-- 最多显示三行 -->
  <div class="van-multi-ellipsis--l3">
    这是一段最多显示三行的文字，多余的内容会被省略
  </div>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. `1px`边框</span><br><span class="line">  为元素添加 `Retina` 屏幕下的 `1px` 边框（即 `hairline`），基于伪类 `transform` 实现。</span><br></pre></td></tr></table></figure>
  <!-- 上边框 -->
  <div class="van-hairline--top"></div>

  <!-- 下边框 -->
  <div class="van-hairline--bottom"></div>

  <!-- 左边框 -->
  <div class="van-hairline--left"></div>

  <!-- 右边框 -->
  <div class="van-hairline--right"></div>

  <!-- 上下边框 -->
  <div class="van-hairline--top-bottom"></div>

  <!-- 全边框 -->
  <div class="van-hairline--surround"></div>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 动画</span><br><span class="line">  可以通过 `transition` 组件使用内置的动画</span><br></pre></td></tr></table></figure>
  <!-- 淡入 -->
  <transition name="van-fade">
    <div v-show="visible">Fade</div>
  </transition>

  <!-- 上滑进入 -->
  <transition name="van-slide-up">
    <div v-show="visible">Slide Up</div>
  </transition>

  <!-- 下滑进入 -->
  <transition name="van-slide-down">
    <div v-show="visible">Slide Down</div>
  </transition>

  <!-- 左滑进入 -->
  <transition name="van-slide-left">
    <div v-show="visible">Slide Left</div>
  </transition>

  <!-- 右滑进入 -->
  <transition name="van-slide-right">
    <div v-show="visible">Slide Right</div>
  </transition>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## `Toast`轻提示</span><br><span class="line">  在页面中间弹出黑色半透明提示，用于消息通知、加载提示、操作结果提示等场景。</span><br><span class="line">1. 引入</span><br></pre></td></tr></table></figure>
  import { Toast } from 'vant';

<p>  Vue.use(Toast);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 文字提示</span><br></pre></td></tr></table></figure><br>  Toast(‘提示内容’);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 加载提示</span><br><span class="line">  使用 `Toast.loading` 方法展示加载提示，通过 `forbidClick` 属性可以禁用背景点击。</span><br></pre></td></tr></table></figure><br>  Toast.loading({<br>    message: ‘加载中…’,<br>    forbidClick: true,<br>  });<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 成功/失败提示</span><br><span class="line">  使用 `Toast.success` 方法展示成功提示，使用 `Toast.fail` 方法展示失败提示。</span><br></pre></td></tr></table></figure><br>  Toast.success(‘成功文案’);<br>  Toast.fail(‘失败文案’);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 自定义图标</span><br><span class="line">  通过 `icon` 选项可以自定义图标，支持传入图标名称或图片链接，通过`loadingType` 属性可以自定义加载图标类型。</span><br></pre></td></tr></table></figure><br>  Toast({<br>    message: ‘自定义图标’,<br>    icon: ‘like-o’,<br>  });</p>
<p>  Toast({<br>    message: ‘自定义图片’,<br>    icon: ‘<a href="https://img01.yzcdn.cn/vant/logo.png&#39;">https://img01.yzcdn.cn/vant/logo.png&#39;</a>,<br>  });</p>
<p>  // 自定义加载图标<br>  Toast.loading({<br>    message: ‘加载中…’,<br>    forbidClick: true,<br>    loadingType: ‘spinner’,<br>  });<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6. 自定义位置</span><br><span class="line">  `Toast` 默认渲染在屏幕正中位置，通过 `position` 属性可以控制 `Toast` 展示的位置。</span><br></pre></td></tr></table></figure><br>  Toast({<br>    message: ‘顶部展示’,<br>    position: ‘top’,<br>  });</p>
<p>  Toast({<br>    message: ‘底部展示’,<br>    position: ‘bottom’,<br>  });<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7. 动态更新提示</span><br><span class="line">  执行 `Toast` 方法时会返回对应的 `Toast` 实例，通过修改实例上的 `message` 属性可以实现动态更新提示的效果。</span><br></pre></td></tr></table></figure><br>  const toast = Toast.loading({<br>    duration: 0, // 持续展示 toast<br>    forbidClick: true,<br>    message: ‘倒计时 3 秒’,<br>  });</p>
<p>  let second = 3;<br>  const timer = setInterval(() =&gt; {<br>    second–;<br>    if (second) {<br>      toast.message = <code>倒计时 $&#123;second&#125; 秒</code>;<br>    } else {<br>      clearInterval(timer);<br>      // 手动清除 Toast<br>      Toast.clear();<br>    }<br>  }, 1000);<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8. 全局方法</span><br><span class="line">  引入 `Toast` 组件后，会自动在 `Vue` 的 `prototype` 上挂载 `$toast` 方法，便于在组件内调用。</span><br></pre></td></tr></table></figure><br>  export default {<br>    mounted() {<br>      this.$toast(‘提示文案’);<br>    },<br>  }<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9. 单例模式</span><br><span class="line">  `Toast` 默认采用单例模式，即同一时间只会存在一个 `Toast`，如果需要在同一时间弹出多个 `Toast`，可以参考下面的示例： </span><br></pre></td></tr></table></figure><br>  Toast.allowMultiple();</p>
<p>  const toast1 = Toast(‘第一个 Toast’);<br>  const toast2 = Toast.success(‘第二个 Toast’);</p>
<p>  toast1.clear();<br>  toast2.clear();<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10. 修改默认配置</span><br><span class="line">  通过 `Toast.setDefaultOptions` 函数可以全局修改 `Toast` 的默认配置。</span><br></pre></td></tr></table></figure><br>  // 将所有 Toast 的展示时长设置为 2000 毫秒<br>  Toast.setDefaultOptions({ duration: 2000 });</p>
<p>  // 将所有 loading Toast 设置为背景不可点击<br>  Toast.setDefaultOptions(‘loading’, { forbidClick: true });</p>
<p>  // 重置所有 Toast 的默认配置<br>  Toast.resetDefaultOptions();</p>
<p>  // 重置 loading Toast 的默认配置<br>  Toast.resetDefaultOptions(‘loading’);</p>
<pre><code>11. `API`
12. `Options`参数
13. 样式变量
</code></pre>
]]></content>
      <categories>
        <category>Vant</category>
      </categories>
      <tags>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>基于VueJS构建并封装tabbar</title>
    <url>/2021/07/06/%E5%9F%BA%E4%BA%8EVueJS%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%B0%81%E8%A3%85tabbar/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文旨在记录我使用<code>vue+vue-cli2+webpack</code>在构建项目和封装<code>tabbar</code>时的具体实现步骤归纳与总结。本文供我在以后的使用中能够快速学习和参考同时也希望能够给大家带来帮助。</p>
<span id="more"></span>
<p>本项目托管于<a href="https://gitee.com/hei_girls/tabbar">Gitee</a>。<br>本项目是基于<code>vue+vue-cli2+webpack</code>，开发实现<code>SPA</code>封装<code>tabbar</code>。在构建本项目之前，需安装如下：</p>
<ol>
<li><code>Node.js&amp;&amp;Node.js&gt;8.9</code></li>
<li><code>webpack&amp;&amp;webpack=3.6.0</code></li>
<li><code>vue-cli2</code><br>上述具体安装步骤，请<a href="https://blog.csdn.net/qq_37582012/article/details/115669436?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%AE%8C%E6%95%B4%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-.pc_search_result_before_js&spm=1018.2226.3001.4187">参见</a><h2 id="本项目构建工具"><a href="#本项目构建工具" class="headerlink" title="本项目构建工具"></a>本项目构建工具</h2>推荐使用<a href="https://www.jetbrains.com/webstorm/">WebStorm</a>进行构建本项目。<h1 id="封装tabbar带来的好处"><a href="#封装tabbar带来的好处" class="headerlink" title="封装tabbar带来的好处"></a>封装<code>tabbar</code>带来的好处</h1>封装的好处：</li>
<li>代码可复用性较强</li>
<li>功能比较明确</li>
<li>提高程序的可维护性</li>
<li>…<h1 id="构建tabbar时具体实现步骤"><a href="#构建tabbar时具体实现步骤" class="headerlink" title="构建tabbar时具体实现步骤"></a>构建<code>tabbar</code>时具体实现步骤</h1><h2 id="tabbar结构的搭建"><a href="#tabbar结构的搭建" class="headerlink" title="tabbar结构的搭建"></a><code>tabbar</code>结构的搭建</h2></li>
<li>在<code>F</code>盘根目录中预先创建一个**<code>tabbar项目</code>**的文件夹</li>
<li>打开项目<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706134742.png" alt="image-20210706134649612"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706135215.png" alt="image-20210706135214320"></li>
<li>打开终端<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706135922.png" alt="image-20210706135922339"></li>
<li>使用<code>vue init webpack 项目名称</code>构建项目 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue init webpack tabbar</span><br></pre></td></tr></table></figure>
 <img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706140255.png" alt="image-20210706140254700"></li>
<li>创建和选择过程如下：<br> <img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706140851.png" alt="image-20210706140851191"></li>
<li>等待安装完成</li>
<li>进入到当前项目并运行项目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706141725.png" alt="image-20210706141725103"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706141842.png" alt="image-20210706141841971"><h2 id="删除无用的组件和多余的代码"><a href="#删除无用的组件和多余的代码" class="headerlink" title="删除无用的组件和多余的代码"></a>删除无用的组件和多余的代码</h2></li>
<li>断开连接<br> <img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706142010.png" alt="image-20210706142010103"></li>
<li>删除<code>HelloWord</code>组件<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706142302.png" alt="image-20210706142301681"></li>
<li>删除<code>logo.png</code>图片<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706142433.png" alt="image-20210706142433433"></li>
<li>删除代码<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706142612.png" alt="image-20210706142612472"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706142724.png" alt="image-20210706142724184"></li>
<li>启用移动端模式<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706145242.png" alt="image-20210706145241715"></li>
<li>使用<code>history</code>模式(默认是<code>hash</code>模式)<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706145523.png" alt="image-20210706145523394"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706145635.png" alt="image-20210706145634646"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706145759.png" alt="image-20210706145759205"></li>
<li>创建文件夹<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706150953.png" alt="image-20210706150953157"></li>
<li>下载<code>tabbar</code>组件中的图标(<code>home、分类、购物车、我的</code>四中图标)<ul>
<li>登录<a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a">阿里巴巴矢量图标库</a></li>
<li>搜索需要的图标<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707011856.png" alt="image-20210707011855825"></li>
<li>点击下载<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707012005.png" alt="image-20210707012005293"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707012344.png" alt="image-20210707012343536"></li>
</ul>
</li>
<li>引入文件，清除外边距<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706150743.png" alt="image-20210706150743388"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706152115.png" alt="image-20210706152115019"></li>
<li>在<code>App.vue</code>文件中设置<code>HTML</code>和<code>CSS</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;tab-bar&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;tab-bar-item&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;./assets/img/tabbar/home.svg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div&gt;首页&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;tab-bar-item&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;./assets/img/tabbar/category.svg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div&gt;分类&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;tab-bar-item&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;./assets/img/tabbar/shopcart.svg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div&gt;购物车&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;tab-bar-item&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;./assets/img/tabbar/profile.svg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div&gt;我的&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># css样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /* 引入重置样式 */</span><br><span class="line">  @import url(&#x27;./assets/css/reset.css&#x27;);</span><br><span class="line"></span><br><span class="line">  #tab-bar &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    background-color: #f2f2f2;</span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    box-shadow: 0 -1px 3px rgba(100,100,100,.3);</span><br><span class="line">  &#125;</span><br><span class="line">  .tab-bar-item &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">    height: 49px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">  &#125;</span><br><span class="line">  .tab-bar-item img &#123;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-bottom: 3px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="TabBar和TabBarItem组件的封装"><a href="#TabBar和TabBarItem组件的封装" class="headerlink" title="TabBar和TabBarItem组件的封装"></a><code>TabBar</code>和<code>TabBarItem</code>组件的封装</h2><h3 id="TabBar组件封装"><a href="#TabBar组件封装" class="headerlink" title="TabBar组件封装"></a><code>TabBar</code>组件封装</h3><h4 id="抽离html和css代码"><a href="#抽离html和css代码" class="headerlink" title="抽离html和css代码"></a>抽离<code>html和css</code>代码</h4>之前，我们直接把<code>html和css</code>代码都放在了<code>App.vue</code>文件中，但是可复用性大大降低。为了能够让组件具有可复用性，我们需要把<code>tabbar</code>相关的代码抽离到<code>TabBar.vue</code>组件文件中，并且确保在<code>App.vue</code>文件中，只有<code>div#app</code>和<code>重置css样式引入代码</code>。</li>
<li>在<code>components</code>文件夹下创建<code>tabbar</code>文件夹，并在<code>tabbar</code>文件夹下创建<code>TabBar.vue</code>组件文件<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706172933.png" alt="image-20210706172932801"></li>
<li>在<code>App.vue</code>组件文件中引入组件并注册使用<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210706173341.png" alt="image-20210706173340619"><h3 id="TabBarItem组件封装"><a href="#TabBarItem组件封装" class="headerlink" title="TabBarItem组件封装"></a><code>TabBarItem</code>组件封装</h3><h4 id="继续抽离html和css代码"><a href="#继续抽离html和css代码" class="headerlink" title="继续抽离html和css代码"></a>继续抽离<code>html</code>和<code>css</code>代码</h4>在上个步骤时，我们只是抽离了<code>TabBar.vue</code>组件的代码，而想要更好的去复用组件的话，还需要再次详细的把代码抽离到<code>TabBarItem.vue</code>中。</li>
<li>在<code>components/tabbar</code>文件夹下继续创建<code>TabBarItem.vue</code>组件文件夹，并把<code>html</code>和<code>css</code>代码拷贝过来<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707013834.png" alt="image-20210707013834013"></li>
<li>使用<code>slot</code>替换<code>div.tab-bar-item</code>中的内容<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707015028.png" alt="image-20210707015027889"></li>
<li>在<code>TabBar.vue</code>文件中，使用<code>slot</code>占用位置<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707015123.png" alt="image-20210707015123068"></li>
<li>在<code>App.vue</code>组件中使用<code>TabBarItem</code>组件，并替换<code>slot</code>中的内容<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707015534.png" alt="image-20210707015533857"></li>
<li>创建<code>views</code>视图文件夹，并创建<code>Home、Category、Shopcart、Profile</code>组件<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707020657.png" alt="image-20210707020656501"></li>
<li>配置懒加载路由和映射关系<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707021246.png" alt="image-20210707021245689"></li>
<li>使用<code>router-view</code>展示<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707023043.png" alt="image-20210707023042447"></li>
<li>通过<code>path</code>传递参数，并通过<code>props</code>接收传递过来的参数<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707023832.png" alt="image-20210707023831666"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707023936.png" alt="image-20210707023935969"></li>
<li>给每个<code>tab-bar-item</code>定义点击事件<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707023621.png" alt="image-20210707023621064"></li>
<li>当路由处于活跃状态，给活跃状态的文字动态添加类名<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707024205.png" alt="image-20210707024204887"><h3 id="MainBar的抽离"><a href="#MainBar的抽离" class="headerlink" title="MainBar的抽离"></a><code>MainBar</code>的抽离</h3>我们在上面的步骤中，把代码都抽离到了<code>App.vue</code>中，但是，这个入口文件看着更臃肿了，所以我们需要再次把代码抽离到<code>MainBar</code>中，让<code>App.vue</code>文件看着更简单 </li>
<li>创建<code>mainbar</code>文件夹，和<code>MainBar.vue</code>文件<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707030435.png" alt="image-20210707030434419"></li>
<li>在<code>App.vue</code>文件中引入<code>MainBar</code><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707030637.png" alt="image-20210707030636212"><h3 id="文件夹起别名"><a href="#文件夹起别名" class="headerlink" title="文件夹起别名"></a>文件夹起别名</h3>我们在每次抽离代码时，图标的路径都需要改动，显得特别的麻烦。那么给文件夹起别名，就能很好的避免这种麻烦(更改配置后，需要重新启动项目)<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707031033.png" alt="image-20210707031033136"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210707031556.png" alt="image-20210707031555734"><h3 id="解决NavigationDuplicated-Avoided-redundant-navigation-to-current-location-问题-重复点击同一个路径"><a href="#解决NavigationDuplicated-Avoided-redundant-navigation-to-current-location-问题-重复点击同一个路径" class="headerlink" title="解决NavigationDuplicated: Avoided redundant navigation to current location: 问题(重复点击同一个路径)"></a>解决<code>NavigationDuplicated: Avoided redundant navigation to current location: </code>问题(重复点击同一个路径)</h3><blockquote>
<p>方案一：使用<code>vue-router</code>版本为3.0即可解决，项目目录下运行命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vue-router@3.0 -S</span><br></pre></td></tr></table></figure>
<blockquote>
<p>方案二：修改<code>VueRouter</code>原型对象上的push方法，在<code>router/index.js</code>中加入如下代码：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取原型对象上的push函数</span><br><span class="line">const originalPush = VueRouter.prototype.push</span><br><span class="line">//修改原型对象中的push方法</span><br><span class="line">VueRouter.prototype.push = function push(location) &#123;</span><br><span class="line">  return originalPush.call(this, location).catch(err =&gt; err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/hei_girls/blogimgs/raw/master/vue/%E5%B0%81%E8%A3%85tabbar/20210708143933.png" alt="image-20210708143706541"></li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Typora+PicGo+Gitee搭建图床</title>
    <url>/2021/03/03/%E5%9F%BA%E4%BA%8ETypora+PicGo+Gitee%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="基于Typora-PicGo-Gitee搭建图床"><a href="#基于Typora-PicGo-Gitee搭建图床" class="headerlink" title="基于Typora+PicGo+Gitee搭建图床"></a>基于<code>Typora+PicGo+Gitee搭建图床</code></h1><p>本文旨在记录我在搭建图床时，进行的每个步骤进行详细归纳与描述。本文供我在以后的搭建中能够快搭建和参考，同时也希望能够给大家带来帮助。</p>
<span id="more"></span>
<p>本文是基于<code>Typora</code>+<code>PicGo</code>+<code>Gitee</code>实现搭建图床功能。在搭建图床之前，需要如下操作：</p>
<h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><h3 id="Gitee注册流程"><a href="#Gitee注册流程" class="headerlink" title="Gitee注册流程"></a>Gitee注册流程</h3><p><a href="https://zhuanlan.zhihu.com/p/360692660">注册流程</a></p>
<h3 id="Gitee创建仓库及获取私人令牌"><a href="#Gitee创建仓库及获取私人令牌" class="headerlink" title="Gitee创建仓库及获取私人令牌"></a>Gitee创建仓库及获取私人令牌</h3><p>按照上面<strong>Gitee注册流程</strong>注册完成后，创建一个新的仓库：<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623144952.png" alt="image-20210623144952"></p>
<p><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623020143.png" alt="image-20210623020143"><br>上述完成后获取：<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623020412.png" alt="image-20210623020412"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623020646.png" alt="image-20210623020646"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623020855.png" alt="image-20210623020855110"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623021153.png" alt="image-20210623021153"><br>复制好令牌后去<code>PicGo</code>中进行配置</p>
<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="https://molunerfinn.com/PicGo/">PicGo官网</a><br><a href="https://github.com/Molunerfinn/PicGo/tags">PicGo下载地址</a><br>这里我使用的版本是<code>v2.3.0-beta.6</code>。点击你需要下载的版本下载并安装：<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623021949.png" alt="image-20210623021949132"><br>傻瓜式下一步安装即可，需要更改路径的话，记得更换路径即可。<br>当你看到如下界面，即为安装成功：<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623022451.png" alt="image-20210623022451433"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623035744.png" alt="image-20210623022732858"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623040056.png" alt="image-20210623023224046"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623040159.png" alt="image-20210623024301962"></p>
<ul>
<li><code>owner</code><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623040316.png" alt="image-20210623024855073"></li>
<li><code>repo</code><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623040429.png" alt="image-20210623025304692"></li>
<li><code>path</code><br>这里填写的是你在<code>blogimgs</code>仓库中可以创建多个文件夹进行归类，例如<code>html</code>相关可以放到<code>HTML</code>文件夹(这时path路径就得改为<code>HTML</code>)，<code>blog</code>相关的图片就放到<code>blog</code>文件夹中归类。</li>
<li><code>token</code><br>这里的<code>token</code>是在<code>Gitee</code>中获取私人令牌时复制的私人令牌，把私人令牌复制到<code>token</code>中即可，如果忘记了，可以从新生成新令牌。<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><h3 id="Typora下载"><a href="#Typora下载" class="headerlink" title="Typora下载"></a>Typora下载</h3><a href="https://www.typora.io/">Typora下载</a><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623040510.png" alt="image-20210623030442745"><h3 id="typora配置"><a href="#typora配置" class="headerlink" title="typora配置"></a>typora配置</h3><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623040546.png" alt="image-20210623030930396"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623040626.png" alt="image-20210623031452922"><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><img src="https://gitee.com/hei_girls/blogimgs/raw/master/blog/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/20210623115406.png" alt="image-20210623115405800"><br>或者下载<a href="https://www.snipaste.com/">snipaste贴图</a>，进行复制粘贴到<code>Typora</code>中，<code>Typora</code>会自动上传图片并返回图片链接。<br>如果选择<code>snipaste贴图</code>自动上传的话，电脑会在<code>C:\Users\用户名称\AppData\Roaming\Typora\typora-user-images</code>保存你使用过的图片，此时我们需要定期清理即可，避免<code>C</code>盘过于臃肿。</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>基于VueJS实现音乐播放器</title>
    <url>/2021/03/03/%E5%9F%BA%E4%BA%8EVueJS%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文旨在记录一下我对于在前端使用<code>Vue</code>搭建本项目的过程中所使用到的技术进行归纳与总结。本文供我在以后的使用中能够快速学习和参考同时也希望能够给大家带来帮助。</p>
<span id="more"></span>
<p>本项目托管于<a href="https://gitee.com/hei_girls/vue-player">Gitee</a>。<br>本项目是基于<code>vue+axios</code>，开发实现页面音乐播放器。在制作本项目之前，需要掌握如下知识：<br><strong>所需知识：</strong></p>
<ol>
<li><code>HTML</code></li>
<li><code>CSS</code></li>
<li><code>JavaScript</code></li>
<li><code>Ajax</code></li>
</ol>
<p><strong>开发工具：</strong><br><a href="https://code.visualstudio.com/">VSCode工具下载</a></p>
<h1 id="播放器功能介绍"><a href="#播放器功能介绍" class="headerlink" title="播放器功能介绍"></a>播放器功能介绍</h1><ol>
<li>在输入框输入<code>歌手/歌曲</code>按下回车键，会在左侧会返回搜索到的结果</li>
<li>点击某首歌的播放按钮，中间CD唱片区域会展示封面信息并且会有动画产生，同时下方开始播放对应的歌曲，且在右侧评论区域，会有用户对当前歌曲的评论进行展示</li>
<li>当点击下方音乐暂停键时，中间CD唱片动画也会暂停，当再次点击时，会继续进行播放，且中间CD唱片动画也会开启</li>
<li>在左侧返回的搜索结果中会出现MV图片，并不是每首歌曲都会有MV图片，这个需要根据后台接口中的<code>mvid</code>返回的结果来判断</li>
<li>当点击MV图片时，会弹出遮罩层，并且会弹出MV界面。点击弹出的MV播放按钮，会自动播放，点击暂停会暂停播放，当点击除了MV区域外的任意区域，MV播放会消失，同时遮罩层也会消失，并且无论当前MV是否正在播放，MV都会暂停</li>
</ol>
<p><strong>实现功能总结：</strong></p>
<ol>
<li>歌曲搜索功能</li>
<li>歌曲播放功能</li>
<li>歌曲封面动画及效果</li>
<li>歌曲评论展示</li>
<li>播放动画同步</li>
<li>MV播放<h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><h2 id="歌曲搜索功能"><a href="#歌曲搜索功能" class="headerlink" title="歌曲搜索功能"></a>歌曲搜索功能</h2>输出关键字，回车，返回数据列表，所以需要使用数组来接收数据。</li>
<li>按下回车(<code>v-on.enter</code>)</li>
<li>查询数据(<code>axios接口v-model</code>)</li>
<li>渲染数据(<code>v-for结合获取到的数组</code>)</li>
</ol>
<p><strong>歌曲搜索接口文档：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求地址：</span></span><br><span class="line">https://autumnfish.cn/search</span><br><span class="line"><span class="comment"># 请求方式：</span></span><br><span class="line">get</span><br><span class="line"><span class="comment"># 请求参数：</span></span><br><span class="line">keywords(查询的关键字)</span><br><span class="line"><span class="comment"># 响应内容：</span></span><br><span class="line">歌曲搜索结果</span><br></pre></td></tr></table></figure>
<p><span style="color:red;"><strong>注意事项：</strong></span></p>
<ol>
<li>在<code>axios</code>中的<code>this</code>指向问题。可以在<code>axios</code>调用接口之前声明一个<code>var that = this;</code>来保存<code>this</code>的值</li>
<li>通过<code>get</code>请求的数据，需要在请求地址后面进行拼接参数</li>
<li>服务器返回的数据比较复杂时，获取的时候需要注意层级结构</li>
<li>可以通过审查元素快速定位到需要操作的元素上<h2 id="歌曲播放功能"><a href="#歌曲播放功能" class="headerlink" title="歌曲播放功能"></a>歌曲播放功能</h2>播放歌曲时，本质就是设置了<code>audio</code>中的<code>src</code>地址。当切换歌曲播放时，其本质是更换了<code>audio</code>中不同的<code>src</code>地址。</li>
<li>点击播放歌曲(<code>v-on</code>自定义参数)</li>
<li>歌曲地址获取(<code>根据接口传递过来的歌曲id</code>)</li>
<li>歌曲地址设置(<code>v-bind动态绑定src地址</code>)</li>
</ol>
<p><strong>歌曲url获取文档：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求地址：</span></span><br><span class="line">https://autumnfish.cn/song/url</span><br><span class="line"><span class="comment"># 请求方式：</span></span><br><span class="line">get</span><br><span class="line"><span class="comment"># 请求参数：</span></span><br><span class="line">id(歌曲id)</span><br><span class="line"><span class="comment"># 响应内容</span></span><br><span class="line">歌曲的url地址</span><br></pre></td></tr></table></figure>
<p><span style="color:red;"><strong>注意事项：</strong></span></p>
<ol>
<li>在<code>axios</code>中的<code>this</code>指向问题。可以在<code>axios</code>调用接口之前声明一个<code>var that = this;</code>来保存<code>this</code>的值</li>
<li>通过<code>get</code>请求的数据，需要在请求地址后面进行拼接参数</li>
<li><code>歌曲id</code>依赖歌曲搜索的结果，对于不用的数据也要关注<h2 id="歌曲封面展示"><a href="#歌曲封面展示" class="headerlink" title="歌曲封面展示"></a>歌曲封面展示</h2>在播放歌曲时，其本质是改变了<code>img</code>标签中的<code>src</code>属性的值。</li>
<li>点击播放按钮(只需在播放歌曲<code>3.2</code>内部声明的函数中调用接口即可)</li>
<li>歌曲封面获取</li>
<li>歌曲封面设置</li>
</ol>
<p><strong>歌曲详情获取文档：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求地址：</span></span><br><span class="line">https://autumnfish.cn/song/detail</span><br><span class="line"><span class="comment"># 请求方式：</span></span><br><span class="line">get</span><br><span class="line"><span class="comment"># 请求参数：</span></span><br><span class="line">ids(歌曲id)</span><br><span class="line"><span class="comment"># 响应内容</span></span><br><span class="line">歌曲详情，包含封面信息</span><br></pre></td></tr></table></figure>
<p><span style="color:red;"><strong>注意事项：</strong></span></p>
<ol>
<li>在<code>axios</code>中的<code>this</code>指向问题。可以在<code>axios</code>调用接口之前声明一个<code>var that = this;</code>来保存<code>this</code>的值，如果使用<code>ES6</code>中的箭头函数，则不需要单独声明变量，直接使用<code>this</code>即可</li>
<li>通过<code>get</code>请求的数据，需要在请求地址后面进行拼接参数</li>
<li>在<code>vue</code>中通过<code>v-bind</code>操作属性</li>
<li>本地无法获取的数据，基本都会偶遇对应的接口<h2 id="歌曲评论"><a href="#歌曲评论" class="headerlink" title="歌曲评论"></a>歌曲评论</h2>点击某个歌曲，对应的评论会渲染到右侧中。因为评论数据很多，所以使用数组进行存储。</li>
<li>点击播放(只需在播放歌曲<code>3.2</code>内部声明的函数中调用接口即可)</li>
<li>歌曲评论获取(接口 歌曲ids)</li>
<li>歌曲评论渲染(<code>v-for</code>)</li>
</ol>
<p><strong>热门评论获取文档：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求地址：</span></span><br><span class="line">https://autumnfish.cn/comment/hot?<span class="built_in">type</span>=0</span><br><span class="line"><span class="comment"># 请求方式：</span></span><br><span class="line">get</span><br><span class="line"><span class="comment"># 请求参数：</span></span><br><span class="line">id(歌曲id，<span class="built_in">type</span>固定为0) =&gt; <span class="built_in">type</span>=0&amp;&amp;id=</span><br><span class="line"><span class="comment"># 响应内容</span></span><br><span class="line">歌曲的热门评论</span><br></pre></td></tr></table></figure>
<p><span style="color:red;"><strong>注意事项：</strong></span></p>
<ol>
<li>在<code>axios</code>中的<code>this</code>指向问题。可以在<code>axios</code>调用接口之前声明一个<code>var that = this;</code>来保存<code>this</code>的值</li>
<li>通过<code>get</code>请求的数据，需要在请求地址后面进行拼接参数</li>
<li>在<code>vue</code>中通过<code>v-for</code>生成列表<h2 id="播放动画"><a href="#播放动画" class="headerlink" title="播放动画"></a>播放动画</h2>播放音乐时，增加类名，暂停音乐时，移除类名，需要进行判断。<code>play</code>和<code>pause</code>都是固定写法。只是单纯的操作播放、暂停，所以不需要调用接口。</li>
<li>监听音乐播放(<code>v-on:play事件</code>)</li>
<li>监听音乐暂停(<code>v-on:pause事件</code>)</li>
<li>操作类名(<code>v-bind=&quot;对象&quot;</code>因为就两种状态所以是布尔值)<br><span style="color:red;"><strong>注意事项：</strong></span></li>
<li>在<code>axios</code>中的<code>this</code>指向问题。可以在<code>axios</code>调用接口之前声明一个<code>var that = this;</code>来保存<code>this</code>的值</li>
<li>通过<code>get</code>请求的数据，需要在请求地址后面进行拼接参数</li>
<li><code>audio</code>标签的<code>play</code>事件会在音频播放的时候触发</li>
<li><code>aduio</code>标签的<code>pause</code>事件会在音频暂停的时候触发</li>
<li>通过<strong>对象</strong>的方式设置类名，类名生效与否取决于后面值得<strong>真假</strong>，为<code>true</code>生效，反之成立<h2 id="MV播放"><a href="#MV播放" class="headerlink" title="MV播放"></a>MV播放</h2>播放MV的本质就是给<code>video</code>中的<code>src</code>地址。当切换MV播放时，其本质是更换了<code>video</code>中不同的<code>src</code>地址。并且通过<code>v-show</code>来操作遮罩层的显示、隐藏功能。</li>
<li>MV图标显示状态(<code>v-if</code>)</li>
<li>MV地址获取(<code>接口 mvid</code>)</li>
<li>遮罩层(<code>v-show v-on</code>)</li>
<li>MV地址设置(<code>v-bind</code>)</li>
</ol>
<p><strong>MV地址获取文档：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求地址：</span></span><br><span class="line">https://autumnfish.cn/mv/url</span><br><span class="line"><span class="comment"># 请求方式：</span></span><br><span class="line">get</span><br><span class="line"><span class="comment"># 请求参数：</span></span><br><span class="line">id(mvid，为0说明没有MV)</span><br><span class="line"><span class="comment"># 响应内容</span></span><br><span class="line">MV的地址</span><br></pre></td></tr></table></figure>
<p><span style="color:red;"><strong>注意事项：</strong></span></p>
<ol>
<li>在<code>axios</code>中的<code>this</code>指向问题。可以在<code>axios</code>调用接口之前声明一个<code>var that = this;</code>来保存<code>this</code>的值</li>
<li>通过<code>get</code>请求的数据，需要在请求地址后面进行拼接参数</li>
<li>不同的接口需要的数据是不同的，阅读文档的时候需要仔细</li>
<li>页面结构复杂之后，通过审查元素的方式去快速定位到相应的元素</li>
<li>响应式的数据一定要先在<code>Vue中的data</code>中预先定义，然后用<code>this.定义的属性=传递过来的值</code>来接收<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1></li>
</ol>
<p><strong>HTML代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;play_wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;player&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search_bar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://sm.ms/image/FO95hAIXyZqoHct&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 搜索歌曲 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入要搜索的Music&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;query&#x27;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;searchMusic&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center_con&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 搜索歌曲列表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;song_wrapper&#x27;</span> <span class="attr">ref</span>=<span class="string">&#x27;song_wrapper&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;song_list&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in musicList&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 点击放歌 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;playMusic(item.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;item.mvid != 0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;playMv(item.mvid)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2020/03/23/dor23bhZtIvK17X.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;switch_btn&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 歌曲信息容器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;player_con&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;playing : isPlaying&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2020/03/23/gZHko2WlpJNcGPv.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;play_bar&quot;</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 黑胶碟片 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2020/03/23/hQPuH4gNRx7XayI.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;disc autoRotate&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;musicCover&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cover autoRotate&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 评论容器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment_wrapper&quot;</span> <span class="attr">ref</span>=<span class="string">&#x27;comment_wrapper&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>热门留言<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;comment_list&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">&quot;item in hotComments&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.user.avatarUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; item.nickname &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>&#123;&#123; item.content &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2020/03/23/dor23bhZtIvK17X.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;right_line&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;audio_con&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">audio</span> <span class="attr">ref</span>=<span class="string">&#x27;audio&#x27;</span> @<span class="attr">play</span>=<span class="string">&quot;play&quot;</span> @<span class="attr">pause</span>=<span class="string">&quot;pause&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">class</span>=<span class="string">&quot;myaudio&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;musicUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video_con&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">ref</span>=<span class="string">&#x27;video&#x27;</span> <span class="attr">:src</span>=<span class="string">&quot;mvUrl&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closeMv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>CSS代码：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;        </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;https://i.loli.net/2020/03/23/gz9abCBAcphv6jF.jpg&quot;</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.play_wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">544px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">272px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search_bar</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1eacda</span>;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search_bar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">23px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search_bar</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">296px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;https://i.loli.net/2020/03/23/9FeKnVlohsY3krO.png&quot;</span>) <span class="number">265px</span> center no-repeat</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.45</span>);</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center_con</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">435px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">435px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_stretch</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span>::-webkit-scrollbar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">580px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://i.loli.net/2020/03/23/chJ89uNpofneFrS.png&quot;</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">122px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_stretch</span> <span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_stretch</span> <span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;https://i.loli.net/2020/03/23/HFyBnJ5loLhI7qK.png&quot;</span>) left -<span class="number">48px</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span>,<span class="selector-class">.song_list</span> <span class="selector-tag">li</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.player_con</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">435px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.player_con2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">435px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.player_con2</span> <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">355px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">265px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.disc</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">73px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cover</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">125px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">112px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">75px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">435px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-class">.comment_list</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">410px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-class">.comment_list</span>::-webkit-scrollbar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-tag">dl</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-tag">dt</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-tag">dt</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-tag">dd</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-class">.name</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment_wrapper</span> <span class="selector-class">.detail</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.audio_con</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f3f4</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myaudio</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f3f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 旋转的动画 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> Rotate &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 旋转的类名 */</span></span><br><span class="line"><span class="selector-class">.autoRotate</span> &#123;</span><br><span class="line">    <span class="attribute">animation-name</span>: Rotate;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">    <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 是否正在播放 */</span></span><br><span class="line"><span class="selector-class">.player_con</span><span class="selector-class">.playing</span> <span class="selector-class">.disc</span>,</span><br><span class="line"><span class="selector-class">.player_con</span><span class="selector-class">.playing</span> <span class="selector-class">.cover</span> &#123;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.play_bar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">25deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">12px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 播放杆 转回去 */</span></span><br><span class="line"><span class="selector-class">.player_con</span><span class="selector-class">.playing</span> <span class="selector-class">.play_bar</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 搜索历史列表 */</span></span><br><span class="line"><span class="selector-class">.search_history</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">296px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">17px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search_history</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch_btn</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right_line</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.video_con</span> <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">546px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">273px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">990</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.video_con</span> <span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">980</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.video_con</span> <span class="selector-class">.shutoff</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;https://i.loli.net/2020/03/23/ZWSChyBwjA5uRfL.png&quot;</span>) no-repeat;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">273px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">995</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>JS代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el: &#x27;#player&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        //查询关键字</span><br><span class="line">        query: &#x27;&#x27;,</span><br><span class="line">        //用来存放歌曲的数组</span><br><span class="line">        musicList: [],</span><br><span class="line">        //歌曲url</span><br><span class="line">        musicUrl: &#x27;&#x27;,</span><br><span class="line">        //存储点击歌曲(框内的)对应的封面，初始时定义的封面</span><br><span class="line">        musicCover: &#x27;https://ss2.baidu.com/6ON1bjeh1BF3odCf/it/u=1573435035,3371549610&amp;fm=15&amp;gp=0.jpg&#x27;,</span><br><span class="line">        //存放歌曲评论</span><br><span class="line">        hotComments: [],</span><br><span class="line">        //设置动画初始播放状态</span><br><span class="line">        isPlaying: false,</span><br><span class="line">        //存放mv地址</span><br><span class="line">        mvUrl: &#x27;&#x27;,</span><br><span class="line">        //遮罩层初始状态</span><br><span class="line">        isShow: false</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        //歌曲搜索</span><br><span class="line">        searchMusic:function() &#123;</span><br><span class="line">            var that = this;</span><br><span class="line">            axios.get(&quot;https://autumnfish.cn/search?keywords=&quot; + this.query).then(function(response) &#123;</span><br><span class="line">                // console.log(response.data.result.songs);</span><br><span class="line">                that.musicList = response.data.result.songs;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //歌曲播放</span><br><span class="line">        playMusic: function(musicId) &#123;</span><br><span class="line">            var that = this;</span><br><span class="line">            // 歌曲url地址</span><br><span class="line">            axios.get(&quot;https://autumnfish.cn/song/url?id=&quot; + musicId).then(function(response) &#123;</span><br><span class="line">                // console.log(response);</span><br><span class="line">                // console.log(response.data.data[0].url);</span><br><span class="line">                that.musicUrl = response.data.data[0].url;</span><br><span class="line">            &#125;)</span><br><span class="line">            // 歌曲封面</span><br><span class="line">            axios.get(&quot;https://autumnfish.cn/song/detail?ids=&quot; + musicId).then(function(response) &#123;</span><br><span class="line">                // console.log(response.data.songs[0]);</span><br><span class="line">                that.musicCover = response.data.songs[0].al.picUrl;</span><br><span class="line">            &#125;) </span><br><span class="line">            // 歌曲评论</span><br><span class="line">            axios.get(&quot;https://autumnfish.cn/comment/hot?type=0&amp;&amp;id=&quot; + musicId).then(function(response) &#123;</span><br><span class="line">                // console.log(response.data.hotComments);</span><br><span class="line">                // console.log(response.data.hotComments[0].content);</span><br><span class="line">                // console.log(response.data.hotComments[0].user.avatarUrl);</span><br><span class="line">                that.hotComments = response.data.hotComments;</span><br><span class="line">            &#125;)        </span><br><span class="line">        &#125;,</span><br><span class="line">        //歌曲播放</span><br><span class="line">        play: function() &#123;</span><br><span class="line">            // console.log(&#x27;play&#x27;);</span><br><span class="line">            this.isPlaying = true;</span><br><span class="line">        &#125;,</span><br><span class="line">        //歌曲暂停</span><br><span class="line">        pause: function() &#123;</span><br><span class="line">            this.isPlaying = false;</span><br><span class="line">        &#125;,</span><br><span class="line">        //播放mv</span><br><span class="line">        playMv: function(mvid) &#123;</span><br><span class="line">            var that = this;</span><br><span class="line">            console.log(mvid);</span><br><span class="line">            axios.get(&quot;https://autumnfish.cn/mv/url?id=&quot; + mvid).then(function(response) &#123;</span><br><span class="line">                // console.log(response.data.data.url);</span><br><span class="line">                that.isShow = true;</span><br><span class="line">                that.mvUrl = response.data.data.url;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //隐藏播放</span><br><span class="line">        closeMv: function() &#123;</span><br><span class="line">            this.isShow = false;</span><br><span class="line">            this.mvUrl = &#x27;&#x27;;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马PINK老师HTML笔记</title>
    <url>/2019/01/17/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88HTML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文旨在记录一下我在跟随<code>PINK</code>老师学习<code>HTML</code>时所做的笔记进行归纳与总结。本文供我在以后的使用中能够快速学习和参考同时也希望能够给大家带来帮助。<br><a href="https://www.bilibili.com/video/BV14J4114768?p=1">视频地址</a></p>
<span id="more"></span>
<h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-25_21-46-25.png" alt="Snipaste_2020-10-25_21-46-25"></p>
<h2 id="基础学习路线"><a href="#基础学习路线" class="headerlink" title="基础学习路线"></a>基础学习路线</h2><ul>
<li>基础主要学习PC端网站布局<ul>
<li>最终网站: 仿PC端网站</li>
</ul>
</li>
<li>精通网页布局，前端<strong>必备</strong>技能<h2 id="基础进阶路线"><a href="#基础进阶路线" class="headerlink" title="基础进阶路线"></a>基础进阶路线</h2></li>
<li>HTML5基础(最常见的没有兼容性的HTML标签)</li>
<li>CSS3基础(最常见的没有兼容性的CSS样式，利用前面学习的标签完成传统PC端网页布局，综合案例:传统企业网页制作)</li>
<li>H5C3提高(学习HTML5新增的标签。CSS3样式，有一定兼容性)</li>
<li>项目开发实战(HTML+CSS,学习网页制作实际开发制作流程规范)<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><h4 id="什么是网页"><a href="#什么是网页" class="headerlink" title="什么是网页"></a>什么是网页</h4></li>
<li><code>网站</code>是指在因特网上根据一定的规则，使用<code>HTML</code>等制作的用于展示特定内容相关的网页集合</li>
<li><code>网页</code>中网站中的一<code>页</code>，通常是<code>HTML格式的文件</code>，它要通过浏览器来阅读<h4 id="网页的组成部分"><a href="#网页的组成部分" class="headerlink" title="网页的组成部分"></a>网页的组成部分</h4><code>网页是构成网站的基本元素</code>，它通常由图片、链接、文字、声音、视频等<code>元素</code>组成。通常我们看到的网页，常见以<code>.htm</code>或<code>.html</code>后缀结尾的文件，因此将其俗称为<code>HTML文件</code><h4 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h4></li>
</ul>
<ol>
<li><code>HTML</code>指的是<span style="color:red;">超文本标记语言</span>,它是用来描述网页的一种语言，那么什么是超文本？<ul>
<li>它可以加入图片、声音、动画、多媒体等内容(<span style="color:red;">超越了文本限制</span>)</li>
<li>它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接(<span style="color:red;">超级连接文本</span>)</li>
</ul>
</li>
<li>HTML不是一种编程语言，而是一种<span style="color:red">标记语言</span></li>
<li>标记语言是一套标记标签<h4 id="网页的形成"><a href="#网页的形成" class="headerlink" title="网页的形成"></a>网页的形成</h4>网页是由网页元素组成的，这些元素是利用<code>HTML</code>标签描述出来，然后通过浏览器解析来显示给用户的<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-25_22-41-49.png" alt="Snipaste_2020-10-25_22-41-49"><br>前端开发代码 —-&gt;  浏览器显示代码(解析、渲染) —-&gt; 生产最后的Web页面<h4 id="网页总结"><a href="#网页总结" class="headerlink" title="网页总结"></a>网页总结</h4>网页是图片、链接、文字、声音、视频等<span style="color:red;">元素</span>组成，其实就是一个以<code>.htm/.html</code>为后缀的文件<br><u><span style="color:red;">HTML:超文本标记语言，用来制作网页的一门语言。由标签组成的，比如图片标签、链接标签、视频标签、声频标签等。</span></u></li>
</ol>
<h3 id="常用浏览器"><a href="#常用浏览器" class="headerlink" title="常用浏览器"></a>常用浏览器</h3><p>网页都是通过浏览器来展示的，关于浏览器需要介绍以下两点：</p>
<h4 id="常用的浏览器"><a href="#常用的浏览器" class="headerlink" title="常用的浏览器"></a>常用的浏览器</h4><p>浏览器是网页显示、运行的平台。常用的浏览器有<code>IE</code>、<code>火狐(Firefox)</code>、<code>谷歌(Chrome)</code>、<code>Safari</code>和<code>Opera</code>等，并成为五大浏览器<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-25_22-53-56.png" alt="Snipaste_2020-10-25_22-53-56"></p>
<h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><p>浏览器内核(<span style="color:red;">渲染引擎</span>): 负责读取网页内容，整理讯息，计算网页的显示方式并显示页面<br>| 浏览器         | 内核    | 备注/代表浏览器                                 |<br>| ————– | ——- | ———————————————– |<br>| <code>IE</code>           | Trident | IE、猎豹安全、360极速浏览器、百度浏览器         |<br>| <code>Firefox</code>      | Gecko   | 火狐浏览器内核                                  |<br>| <code>Safari</code>       | Webkit  | 苹果浏览器内核                                  |<br>| <code>Chrome/Opera</code> | Blink   | Chrome/Opera浏览器内核。Blink其实是Webkit的分支 |<br>目前国内一般浏览器都会采用<code>Webkit/Blink</code>内核，如360、UC、QQ浏览器、搜狗等</p>
<h3 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h3><p><code>Web标准</code>是由<code>W3C</code>组织和其他标准化组织制定的一系列标准的集合。W3C(万维网联盟)是国际最著名的标准化组织</p>
<ol>
<li>为什么需要web标准<ul>
<li>浏览器不同，它们显示页面或者排版就会出现些许差异</li>
</ul>
</li>
<li>遵循web标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：<ol>
<li>让web的发展前景更广阔</li>
<li>内容能被更广泛的设备访问</li>
<li>更容易被搜寻引擎搜索</li>
<li>降低网站流量费用</li>
<li>使用网站更易于维护</li>
<li>提高页面浏览器速度</li>
</ol>
</li>
<li>web标准的构成(<strong><span style="color: red;">面试题</span></strong>)<br>主要包括<span style="color:red;">结构</span>、<span style="color:red;">表现</span>、<span style="color:red;">行为</span>三个部分组成<table>
<thead>
<tr>
<th>标准</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>结构用于对网页元素进行整理和分类，现阶段主要学的是HTML</td>
</tr>
<tr>
<td>表现</td>
<td>表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>,主要指的是CSS</td>
</tr>
<tr>
<td>行为</td>
<td>行为是指网页模型的定义及交互的编写，现阶段主要学的是JavaScript</td>
</tr>
<tr>
<td>web标准提出的最佳体验方案：结构、样式、行为相分离</td>
<td></td>
</tr>
<tr>
<td><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-25_23-21-31.png" alt="Snipaste_2020-10-25_23-21-31"></td>
<td></td>
</tr>
</tbody></table>
<h2 id="HTML标签导读"><a href="#HTML标签导读" class="headerlink" title="HTML标签导读"></a>HTML标签导读</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3></li>
<li>说出标签的书写注意规范</li>
<li>写出HTML骨架标签</li>
<li>写出超链接标签</li>
<li>写出图片标签，并说出alt和title的区别</li>
<li>说出相对路径的三种形式<h3 id="HTML语法规范"><a href="#HTML语法规范" class="headerlink" title="HTML语法规范"></a>HTML语法规范</h3><h4 id="基本语法概述"><a href="#基本语法概述" class="headerlink" title="基本语法概述"></a>基本语法概述</h4></li>
</ol>
<ul>
<li>HTML标签是<span style="color:red;">由尖括号包围的关键词</span>,例如<code>&lt;html&gt;</code></li>
<li>HTML标签<span style="color:red;">通常是成对出现的</span>，例如<code>&lt;html&gt;</code>和<code>&lt;/html&gt;</code>，我们称为<code>双标签</code>。标签对中的第一个标签是开始标签，第二个标签是结束标签。</li>
<li>有些特殊的标签必须是单标签(极少情况使用)，例如<code>&lt;br/&gt;</code>，我们称为<code>单标签</code>。<h4 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h4>双标签关系可分为两类：<code>包含关系</code>和<code>并列关系</code>。</li>
</ul>
<ol>
<li>包含关系/父子关系<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li>
<li>并列关系/兄弟关系<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt; &lt;/head&gt;</span><br><span class="line">&lt;body&gt; &lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h4 id="网页的基本结构标签"><a href="#网页的基本结构标签" class="headerlink" title="网页的基本结构标签"></a>网页的基本结构标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;标题&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        主体</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;html&gt;&lt;/html&gt;</code></td>
<td>HTML标签</td>
<td>页面中最大的标签，称之为<code>根</code>标签</td>
</tr>
<tr>
<td><code>&lt;head&gt;&lt;/head&gt;</code></td>
<td>文档的头部</td>
<td>注意在head标签中我们必须要有title标签</td>
</tr>
<tr>
<td><code>&lt;title&gt;&lt;/title&gt;</code></td>
<td>文档的标题</td>
<td>让页面拥有一个属于自己的网页标题</td>
</tr>
<tr>
<td><code>&lt;body&gt;&lt;/body&gt;</code></td>
<td>文档的主体</td>
<td>元素包含文档的所有内容，页面内容基本都放在body里面</td>
</tr>
<tr>
<td><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-25_23-47-51.png" alt="Snipaste_2020-10-25_23-47-51"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="骨架标签解读"><a href="#骨架标签解读" class="headerlink" title="骨架标签解读"></a>骨架标签解读</h2><h3 id="DOCTYPE-标签"><a href="#DOCTYPE-标签" class="headerlink" title="DOCTYPE 标签"></a>DOCTYPE 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">//告诉浏览器，当前页面采取的是HTML5版本来显示网页。</span><br></pre></td></tr></table></figure>
<p>文档类型声明标签：<br>DOCTYPE 文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页(有xhtm，html4，html5)<br><strong>注意：</strong></p>
<ol>
<li><code>&lt;!DOCTYPE html&gt;</code>声明位于文档中的最前面的位置，处于<code>&lt;html&gt;</code>标签之前。</li>
<li><code>&lt;!DOCTYPE html&gt;</code>不是一个HTML标签，它就是文档类型声明标签。<h3 id="lang语言种类"><a href="#lang语言种类" class="headerlink" title="lang语言种类"></a>lang语言种类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br></pre></td></tr></table></figure>
用来定义当前文档显示的语言</li>
<li>en定义语言为英语</li>
<li>zh-CN定义语言为中文<br>对于文档显示来说，定义成en的文档也可以写中文，定义zh-CN的文档也可以写英文<br><span style="color:red;">这个属性对浏览器和搜索引擎(百度、谷歌等)还是有一定的作用</span></li>
</ol>
<h3 id="charset字符集"><a href="#charset字符集" class="headerlink" title="charset字符集"></a>charset字符集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>字符集(Character set)是多个字符的集合，以便计算机能够识别和存储各种文字<br>charset常用的值有:BG2312、BIG5、GBK和UTF-8，其中<code>UTF-8</code>也被称为<code>万国码</code>，基本包含了全世界所有国家需要用到的字符<br><u><span style="color:red;">注意: 上面语法是必须要写的代码，否则可能引起乱码的情况，一般情况下，统一使用<code>UTF-8</code>编码，尽量统一写成标准的<code>UTF-8</code>，不要写成<code>utf8</code>或<code>UTF8</code>。</span></u></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><code>&lt;!DOCTYPE html&gt;</code>文档类型声明标签，告诉浏览器这个页面采取html5版本来显示页面，</li>
<li><code>&lt;html lang=&quot;en&quot;&gt;</code>告诉浏览器或者搜索引擎这是一个英文网站。本页面采取英文来显示。</li>
<li><code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>必须写，采取<code>utf-8</code>来保存文字。如果不写就会出现乱码的情况。<h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1>学习标签，重点是记住每个标签的语义。简单理解就是指<code>便桥的含义</code>，即这个标签是用来干什么的。<br><span style="color:red;">根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰</span></li>
</ol>
<h2 id="标题标签-lt-h1-gt"><a href="#标题标签-lt-h1-gt" class="headerlink" title="标题标签&lt;h1&gt; ~``"></a>标题标签<code>&lt;h1&gt;</code> ~`<h6>`</h2><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML提供了6个等级的网页标题，即<code>&lt;h1&gt;~&lt;h6&gt;</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;我是一级标题&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;我是二级标题&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;我是三级标题&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我是四级标题&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;我是五级标题&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;我是六级标题&lt;/h6&gt;</span><br></pre></td></tr></table></figure>
<p><span style="color:red;">标签语义:</span>作为标题使用，并且依据重要性递减<br><strong>特点：</strong></p>
<ol>
<li>加了标题的文字会变得加粗，字号也会依次变大。</li>
<li>一个标题独占一行。</li>
</ol>
<h2 id="段落和换行标签"><a href="#段落和换行标签" class="headerlink" title="段落和换行标签"></a>段落和换行标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;我是段落标签&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>在网页中，要把文字有条理的显示出来，就需要将这些文字分段显示。在HTML标签中，<code><p></p></code>标签用于定义段落，它可以将整个网页分为若干个段落<br><strong>特点：</strong></p>
<ol>
<li>文本在一个段落中会根据浏览器窗口的大小自动换行。</li>
<li>段落与段落之间保有间隙。<h2 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;br /&gt; </span><br><span class="line">// 换行标签,用于强制换行</span><br></pre></td></tr></table></figure>
在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用<span style="color:red;">换行<code>&lt;br/&gt;</code>标签</span></li>
</ol>
<p><strong>特点：</strong></p>
<ol>
<li><code>&lt;br /&gt;</code>是各单标签。</li>
<li><code>&lt;br /&gt;</code>标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。<h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2>在网页中，有时需要为文字设置<strong>粗体</strong>、<em>倾斜</em> 或者 <u>下划线</u> 等效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。<br><span style="color:red;">标签语义：突出重要性，比普通文字更重要</span><table>
<thead>
<tr>
<th>语义</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td>
<td>更推荐使用<strong>标签加粗，语义更强烈</td>
</tr>
<tr>
<td>倾斜</td>
<td><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td>
<td>更推荐使用<em>标签，语义更强烈</td>
</tr>
<tr>
<td>删除线</td>
<td><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td>
<td>更推荐使用<del></del>标签，语义更强烈</td>
</tr>
<tr>
<td>下划线</td>
<td><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></td>
<td>更推荐使用<ins>标签，语义更强烈</td>
</tr>
</tbody></table>
</li>
</ol>
<p><strong>加粗</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我是&lt;strong&gt;强壮&lt;/strong&gt;的文字</span><br><span class="line">我是&lt;b&gt;加粗&lt;/b&gt;的文字</span><br></pre></td></tr></table></figure>
<p><strong>倾斜</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我&lt;em&gt;倾斜&lt;/em&gt;啦</span><br><span class="line">我&lt;i&gt;倒&lt;/i&gt;啦</span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">被&lt;del&gt;删除&lt;/del&gt;啦</span><br><span class="line">被&lt;s&gt;穿过&lt;/s&gt;啦</span><br></pre></td></tr></table></figure>
<p><strong>下划线</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ins&gt;ins啦&lt;/ins&gt;</span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-26_01-18-36.png" alt="Snipaste_2020-10-26_01-18-36"></p>
<h2 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h2><p><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>是没有语义的，它们就是一个盒子，用来装内容的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;我是div盒子,独占一行&lt;/div&gt;</span><br><span class="line">&lt;span&gt;我是span盒子，在一行显示&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p><strong>特点：</strong></p>
<ol>
<li>div标签用来布局，但是div标签独占一行，一行只能放一个div标签。</li>
<li>span标签也是用来布局的，但是一行可以放多个span标签。<h2 id="图像标签和路径"><a href="#图像标签和路径" class="headerlink" title="图像标签和路径"></a>图像标签和路径</h2></li>
</ol>
<p><strong>图像标签</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;../img/banner1.jpg&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p><span style="color:red;"> src </span>是<img>标签的<span style="color:red;">必须属性</span>，它用于<span style="color:red;">制定图像文件的路径和文件名</span><br>所谓属性：简单理解就是<code>属于</code>这个图像标签的<code>特性</code><br>| 属性     | 属性值   | 说明                                     |<br>| ——– | ——– | —————————————- |<br>| <code>src</code>    | 图片路径 | 必须属性,设置图片的路径                  |<br>| <code>alt</code>    | 文本     | 替代文本，图像不能显示时，替代显示的文字 |<br>| <code>title</code>  | 文本     | 提示文本。当鼠标放到图像上，显示的文字   |<br>| <code>width</code>  | 像素     | 设置图像的宽度                           |<br>| <code>height</code> | 像素     | 设置图像的高度                           |<br>| <code>border</code> | 像素     | 设置图像的边框粗细                       |<br><strong>图像标签属性注意点：</strong></p>
<ol>
<li>图像标签可以拥有多个属性，必须写在标签名的后面</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开</li>
<li>属性采取键值对的格式，即key=”value”的格式，属性名=”属性值”</li>
</ol>
<p><strong>图像中关于路径</strong></p>
<ol>
<li>相对路径<br>以<span style="color:red;">引用文件所在位置</span>为参考基础，而建立出的目录路径<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;banner1.png&quot; /&gt; //同一级路径</span><br><span class="line">&lt;img src=&quot;./banner1.png&quot; /&gt; //同一级路径</span><br><span class="line">&lt;img src=&quot;imgs/banner1.png&quot; /&gt; //下一级路径</span><br><span class="line">&lt;img src=&quot;./imgs/banner1.png&quot; /&gt; //下一级路径</span><br><span class="line">&lt;img src=&quot;../baidu.png&quot; /&gt; //上一级路径</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>相对路劲分类</th>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>同一级路径</td>
<td><code>./</code></td>
<td>图像文件位于HTML文件同一级，如<img src="./banner1.png" />或<img src ="banner1.png" /></td>
</tr>
<tr>
<td>下一级路径</td>
<td><code>/</code></td>
<td>图像文件位于HTML文件下一级,如<img src="imgs/banner1.png" /></td>
</tr>
<tr>
<td>上一级路径</td>
<td><code>../</code></td>
<td>图像文件位于HTML文件上一级，如<img src="../baidu.png" /></td>
</tr>
<tr>
<td>相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级、下一级和同一级就是<span style="color:red;">图片相对趋于HTML页面的位置</span></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li>绝对路径<br>是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径<br>如<code>F:\Code_practice2020\HTML</code>或完整的网络地址<code>https://www.itcast.cn/images/logo.gif</code><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2>在HTML标签中，<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>标签用于定义超链接，作用是从一个页面链接到另一个页面</li>
</ol>
<p><strong>1.语法格式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;www.baidu.com&quot; target=&quot;_self/_blank&quot;&gt;文本或图像&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性</th>
<th>必填</th>
<th>值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>href</code></td>
<td>是</td>
<td><a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能</td>
</tr>
<tr>
<td><code>target</code></td>
<td>否</td>
<td><code>_self</code>/<code>_blank</code></td>
<td>用于指定链接页面的打开方式，其中<code>_self</code>为默认值，<code>_blank</code>为在新窗口打开方式</td>
</tr>
<tr>
<td><strong>2.链接分类</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ol>
<li>外部链接: 例如<code>&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;</code></li>
<li>内部链接: 网站内部页面之间的相互链接，直接链接到内部网页名即可,例如<code>&lt;a href=&quot;index.html&quot; targe=&quot;_blank&quot;&gt;首页&lt;/a&gt;</code></li>
<li>空链接: 如果当时没有确定链接目标时，<code>&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;</code></li>
<li>下载链接: 如果href里面地址是一个文件或压缩包，会下载这个文件(.exe/.zip压缩包形式的文件)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;img.zip&quot;&gt;下载图片&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
<li>网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接</li>
<li>防止跳转链接: 如<code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code>、<code>&lt;a href=&quot;javascript:void(0);&quot;&lt;/a&gt;</code></li>
<li>锚点链接: 当我们点击链接，可以快速定位到页面中的某个位置<ol>
<li>在链接文本的href属性中，设置属性值为<code>#名字</code>的形式，如<code>&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;</code></li>
<li>找到目标位置标签，里面添加一个id=two,如<code>&lt;h3 id=&quot;two&quot;&gt;目标位置&lt;/h3&gt;</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;</span><br><span class="line">&lt;h3 id=&quot;two&quot;&gt;目标位置&lt;/h3&gt;</span><br></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2>如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是HTML注释 --&gt;</span><br></pre></td></tr></table></figure>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2>在HTML页面中，有一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代<table>
<thead>
<tr>
<th>特殊字符</th>
<th>描述</th>
<th>字符的代码</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格符</td>
<td><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于号</td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于号</td>
<td><code>&amp;gt;</code></td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>和号</td>
<td><code>&amp;amp;</code></td>
</tr>
<tr>
<td><code>￥</code></td>
<td>人民币</td>
<td><code>&amp;yen;</code></td>
</tr>
<tr>
<td><code>©</code></td>
<td>版权</td>
<td><code>&amp;copy;</code></td>
</tr>
<tr>
<td><code>®</code></td>
<td>注册商标</td>
<td><code>&amp;reg;</code></td>
</tr>
<tr>
<td><code>°</code></td>
<td>摄氏度</td>
<td><code>&amp;deg;</code></td>
</tr>
<tr>
<td><code>±</code></td>
<td>正负号</td>
<td><code>&amp;plusmn;</code></td>
</tr>
<tr>
<td><code>×</code> 或 <code>*</code></td>
<td>乘号</td>
<td><code>&amp;times;</code></td>
</tr>
<tr>
<td><code>÷ </code>或 <code>/</code></td>
<td>除号</td>
<td><code>&amp;divide;</code></td>
</tr>
<tr>
<td><code>²</code></td>
<td>平方2(上标2)</td>
<td><code>&amp;sup2;</code></td>
</tr>
<tr>
<td><code>³</code></td>
<td>立方3(上标3)</td>
<td><code>&amp;sup3;</code></td>
</tr>
</tbody></table>
<h1 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h1>表格是实际开发中<strong>非常非常</strong>常用的标签<h2 id="表格的主要作用"><a href="#表格的主要作用" class="headerlink" title="表格的主要作用"></a>表格的主要作用</h2>表格主要<span style="color:red;">用于显示、展示数据</span>,因为它可以让数据显示的非常规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得非常重要。一个清爽简约的表格能够把繁杂的数据表现的很有条理。<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_00-15-30.png" alt="Snipaste_2020-10-27_00-15-30"><h2 id="表格的基本语法"><a href="#表格的基本语法" class="headerlink" title="表格的基本语法"></a>表格的基本语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;单元格内的文字&lt;/td&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/table&gt;</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_00-30-02.png" alt="Snipaste_2020-10-27_00-30-02"></li>
</ol>
</li>
<li><code>&lt;table&gt;&lt;/table&gt;</code>是用于定义表格的标签</li>
<li><code>&lt;tr&gt;&lt;/tr&gt;</code>标签用于定义表格中的行，且必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>标签中</li>
<li><code>&lt;td&gt;&lt;/td&gt;</code>用于定义表格中的单元格，且必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中<h2 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a>表头单元格标签</h2>一般标有单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗且居中显示<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;刘德华&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;张学友&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;31&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;郭富城&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;53&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;黎明&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_00-38-55.png" alt="Snipaste_2020-10-27_00-38-55"></li>
<li>表格的相关属性<table>
<thead>
<tr>
<th>属性名</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>align</code></td>
<td><code>left、center、right</code></td>
<td>规定表格相对周围元素的对齐方式</td>
</tr>
<tr>
<td><code>border</code></td>
<td>1或<code>&quot;1px solid #ccc&quot;</code></td>
<td>规定表格单元是否拥有边框，默认为””，表示没有边框</td>
</tr>
<tr>
<td><code>cellpadding</code></td>
<td>像素值</td>
<td>规定单元边沿与其内容之间的空白，默认1像素</td>
</tr>
<tr>
<td><code>cellspacing</code></td>
<td>像素值</td>
<td>规定单元格之间的空白，默认2像素</td>
</tr>
<tr>
<td><code>width/height</code></td>
<td>像素值或百分比</td>
<td>规定表格的宽度/高度</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table align=&quot;center&quot; border=&quot;1&quot; cellpadding=&quot;20&quot; cellspacing=&quot;0&quot; width=&quot;500&quot;&gt;</span><br><span class="line">  &lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;刘德华&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;张学友&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;31&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;郭富城&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;53&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;&lt;td&gt;黎明&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<span style="color:red;">注意：这些属性要写在<code>table</code>上</span></li>
<li>表格结构标签<br>为了更好的表示表格的语义，可以将表格分割成<span style="color:red;">表格头部</span>和<span style="color:red;">表格主体</span>两大部分<br>在表格标签中，分别用:<span style="color:red;"><code>&lt;thead&gt;</code>标签来表示表格的头部区域</span>、<span style="color:red;"><code>&lt;tbody&gt;</code>标签来表示表格的主体区域</span>,这样可以更好地分清表格结构<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_01-26-09.png" alt="Snipaste_2020-10-27_01-26-09"><ol>
<li><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。<code>&lt;thead&gt;</code>内部必须拥有<code>&lt;tr&gt;</code>标签，一般是位于第一行</li>
<li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体，主要用于存放数据本体</li>
<li><code>&lt;thead&gt;&lt;/thead&gt;</code>和<code>&lt;tbody&gt;&lt;/tbody&gt;</code>标签都放在<code>&lt;table&gt;&lt;/table&gt;</code>中<h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2>在某些特殊情况下，可以把多个单元格合并为一个单元格</li>
</ol>
</li>
</ol>
<p><strong>自己总结：</strong><br><span style="color:red;">1. 如果需要合并的单元格在同一行，则为列合并<code>colspan=&quot;2&quot;</code></span><br><span style="color:red;">2. 如果需要合并的单元格在同一列则为行合并</span></p>
<ol>
<li>合并单元格方式<ul>
<li>跨行合并: <code>rowspan=&quot;合并单元格的个数&quot;</code></li>
<li>跨列合并: <code>colspan=&quot;合并单元格的个数&quot;</code></li>
</ul>
</li>
<li>目标单元格<ul>
<li>跨行合并：最上侧单元格为目标单元格，写合并代码</li>
<li>跨列合并:   最左侧单元格为目标单元格，写合并代码</li>
</ul>
</li>
<li>合并单元格的步骤<ul>
<li>先确定是跨行还是跨列合并</li>
<li>找到目标单元格</li>
<li>删除多余的单元格<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; width=&quot;500&quot; height=&quot;300&quot; cellspacing=&quot;0&quot;&gt;</span><br><span class="line">  &lt;tbody&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td rowspan=&quot;2&quot;&gt;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_01-37-05.png" alt="Snipaste_2020-10-27_01-58-13"><br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_01-58-13.png" alt="Snipaste_2020-10-27_01-58-13"></li>
</ul>
</li>
<li>表格总结<ol>
<li>表格的相关标签<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_02-19-48.png" alt="Snipaste_2020-10-27_02-19-48"></li>
<li>表格的相关属性</li>
<li>合并单元格<h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1>列表是用来<span style="color:red;">布局</span>的<br>列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_02-30-39.png" alt="Snipaste_2020-10-27_02-30-39"></li>
</ol>
</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p><code>&lt;ul&gt;</code>标签标示HTML页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用<code>&lt;li&gt;</code>标签定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;无序列表1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;无序列表2&lt;/li&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>无序列表的各个列表项之间没有顺序级别之分，是并列的</li>
<li><code>&lt;ul&gt;&lt;/ul&gt;</code>标签中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>标签</li>
<li><code>&lt;li&gt;&lt;/li&gt;</code>里面可以容纳任何标签元素</li>
<li>无序列表会带有自己的样式属性<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2>有序列表即为有排列顺序的列表，其各个列表项都会按照一定的顺序排列定义<br>在HTML标签中,<span style="color:red;"><code>&lt;ol&gt;</code></span>标签用于定义有序列表，列表排序以数字来显示，并且使用<code>&lt;li&gt;</code>标签来定义列表项<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;有序列表项1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;有序列表项2&lt;/li&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li>
<li>有序列表的各个列表项之间有顺序级别之分，是并列的</li>
<li><code>&lt;ol&gt;&lt;/ol&gt;</code>标签中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>标签</li>
<li><code>&lt;li&gt;&lt;/li&gt;</code>里面可以容纳任何标签元素</li>
<li>有序列表会带有自己的样式属性<h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_15-22-39.png" alt="Snipaste_2020-10-27_15-22-39"><br>自定义列表常用于对术语或名称进行解释和描述，定义列表的列表项前没有任何项目符号<br>在HTML标签中,<span style="color:red;">dl</span>标签用于定义描述列表(或定义列表),该标签会与<span style="color:red;"></span>(定义项目/名字)和<span style="color:red;">dt</span>(描述每一个项目/名字)一起使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;名词1&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;名词1解释1&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;名词1解释2&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><code>&lt;dl&gt;&lt;/dl&gt;</code>里面只能包含<code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code></li>
<li><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>个数没有限制，经常是一个<code>&lt;dt&gt;</code>对应多个<code>&lt;dd&gt;</code></li>
<li>在自定义列表中<code>&lt;dl&gt;</code>包含的<code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>,并且<code>&lt;dd&gt;</code>是对于<code>&lt;dt&gt;</code>来进行描述的<h2 id="列表总结"><a href="#列表总结" class="headerlink" title="列表总结"></a>列表总结</h2><table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>ul</code></td>
<td>无序列表</td>
<td>里面只能包含li，没有顺序，使用较多，li里面可以包含任何标签元素</td>
</tr>
<tr>
<td><code>ol</code></td>
<td>有序列表</td>
<td>里面只能包含li，有顺序之分，使用相对较少，li里面可以包含任何标签元素</td>
</tr>
<tr>
<td><code>dl</code></td>
<td>自定义列表</td>
<td>里面只能包含dt和dd，使用较多，dt和dd里面可以包含任何标签元素，dd是对dt进行描述的</td>
</tr>
</tbody></table>
<h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><h2 id="为什么需要表单"><a href="#为什么需要表单" class="headerlink" title="为什么需要表单"></a>为什么需要表单</h2>使用表单的目的就是为了<span style="color:red;">收集用户信息</span><br>在网页中，我们也需要根用户进行交互，收集用户资料，此时就需要用到表单<h2 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h2>在HTML中，一个完整的表单通常由<span style="color:red;">表单域、表单控件(也称为表单元素)、和提示信息</span>3个部分构成<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2020-10-27_15-43-19.png" alt="Snipaste_2020-10-27_15-43-19"><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><code>表单域</code>是一个<span style="color:red;">包含表单元素的区域</span>,实现用户信息的收集和传递<br><span style="color:red;"><code>&lt;form&gt;</code>会把它范围内的表单元素提交给服务器</span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;url地址&quot; methid=&quot;提交方式&quot; name=&quot;表单域名称&quot;&gt;</span><br><span class="line">    各种表单元素控件</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>action</code></td>
<td>url地址</td>
<td>用于指定接收并处理表单数据的服务器呈现的url地址</td>
</tr>
<tr>
<td><code>method</code></td>
<td>get/post</td>
<td>用于设置表单数据的提交方式，其取值为get或post</td>
</tr>
<tr>
<td><code>name</code></td>
<td>表单名称</td>
<td>用于指定表单的名称，以区分同一个页面中的多个表单域</td>
</tr>
</tbody></table>
<h2 id="表单控件-表单元素"><a href="#表单控件-表单元素" class="headerlink" title="表单控件/表单元素"></a>表单控件/表单元素</h2>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件<h3 id="input输入表单元素"><a href="#input输入表单元素" class="headerlink" title="input输入表单元素"></a>input输入表单元素</h3><code>&lt;input&gt;</code>是输入的意思，在表单元素中<span style="color:red;"><code>&lt;input&gt;</code>标签用于收集用户信息</span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;属性值&quot; /&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>type属性的属性及其描述:</strong><br>| 属性值     | 描述                                                 |<br>| ———- | —————————————————- |<br>| <code>button</code>   | 点击按钮                                             |<br>| <code>checkbox</code> | 复选框                                               |<br>| <code>file</code>     | 输入字段和”浏览”按钮，供文件上传                     |<br>| <code>hidden</code>   | 隐藏的输入字段                                       |<br>| <code>image</code>    | 图像形式的提交按钮                                   |<br>| <code>password</code> | 密码字段，该字段中的字符被掩码                       |<br>| <code>radio</code>    | 单选按钮                                             |<br>| <code>reset</code>    | 重置按钮，重置按钮会清除表单中的所有数据             |<br>| <code>submit</code>   | 提交按钮，提交按钮会把表单数据发送到服务器           |<br>| <code>text</code>     | 输入的字段，用户可在其中输入文本，默认宽度为20个字符 |<br>| <code>number</code>   | 只能输入数字                                         |<br>除type属性外，<code>&lt;input&gt;</code>标签还有其他很多属性，常用如下:<br>| 属性        | 属性值       | 描述                                                         |<br>| ———– | ———— | ———————————————————— |<br>| <code>name</code>      | 由用户自定义 | input元素的名称,<span style="color:red;">单选或多选按钮时，name属性值必须一致</span>,每个input标签都必须设置一个name属性 |<br>| <code>value</code>     | 由用户自定义 | input元素的值                                                |<br>| <code>checked</code>   | checked      | 规定此input元素首次加载时应当被选中                          |<br>| <code>maxlength</code> | 正整数       | 规定输入字段中的字符的最大长度                               |</p>
<ol>
<li>name和value是每个表单元素都有的属性值，主要是给后台人员使用</li>
<li>name表单元素的名字，要求<span style="color:red;">单选按钮和复选框要有相同的name值</span></li>
<li>checkbox属性主要针对于单选按钮和复选框，主要作用就是一打开页面，就可以默认选中某个表单元素</li>
<li>maxlength是用户可以在表单输入的最大字符数，使用次数较少<h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><code>&lt;label&gt;</code>标签为input元素定义标注<br><code>&lt;label&gt;</code>标签用于绑定一个表单元素，当点击label标签内的文本时，浏览器会自动将焦点转到或选择对应的表单元素上，用来增加用户体验<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">label</span> for=&quot;sex&quot;&gt;男&lt;/<span class="selector-tag">label</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> type=&quot;checkbox&quot; id=&quot;sex&quot;&gt;</span><br></pre></td></tr></table></figure>
<span style="color:red;"><code>label</code>标签的<code>for</code>属性对应相关元素的<code>id</code>属性</span><h3 id="select下拉表单元素"><a href="#select下拉表单元素" class="headerlink" title="select下拉表单元素"></a>select下拉表单元素</h3>使用场景：在页面中，如果有多个选项让用户选择，并且想要节约页面空间，这是使用<code>select</code>标签控件定义下拉列表<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;&quot;&gt;请选择家乡&lt;/option&gt;</span><br><span class="line">  &lt;option value=&quot;&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">  &lt;option value=&quot;&quot;&gt;河北&lt;/option&gt;</span><br><span class="line">  &lt;option value=&quot;&quot;&gt;山东&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
<li><code>select</code>中至少包含一对<code>option</code></li>
<li>在<code>option</code>中定义selected=”selected”时，当前项即为默认选中项</li>
</ol>
<h3 id="textarea文本域表单元素"><a href="#textarea文本域表单元素" class="headerlink" title="textarea文本域表单元素"></a>textarea文本域表单元素</h3><p>使用场景：当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用<code>textarea</code>标签。在表单元素中，<code>textarea</code>标签是用于定义多行文本输入的控件<br>使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板、评论等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;textarea name=&quot;&quot; id=&quot;&quot; placeholder=&quot;请输入&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure>

<h1 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h1><p>HTML5的新增特性主要是针对于以前的不足，增加了一些<code>新的标签</code>、<code>新的表单</code>和<code>新的表单属性</code>等<br>这些新特性都有兼容问题，基本是<code>IE9+</code>以上版本的浏览器才支持，如果不考虑兼容性，则可以大量使用</p>
<h2 id="HTML5新增的语义化标签"><a href="#HTML5新增的语义化标签" class="headerlink" title="HTML5新增的语义化标签"></a>HTML5新增的语义化标签</h2><p><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2021-03-07_16-41-07.png" alt="Snipaste_2021-03-07_16-41-07"><br>以前布局，基本都是使用div来做的。div对于搜索引擎来说没有语义的<br>| 标签      | 描述             |<br>| ——— | —————- |<br>| <code>header</code>  | 头部标签         |<br>| <code>nav</code>     | 导航标签         |<br>| <code>article</code> | 内容标签         |<br>| <code>section</code> | 定义文档某个区域 |<br>| <code>aside</code>   | 侧边栏标签       |<br>| <code>footer</code>  | 尾部标签         |<br><strong>注意：</strong></p>
<ol>
<li>这种语义化标准主要是针对“搜索引擎”的</li>
<li>这些新标签页面中可以使用多次</li>
<li>在IE9中，需要把这些元素转换为“块级元素”。</li>
<li>其实，我们移动端更喜欢使用这些标签</li>
<li>HTML5还增加了很多其他的标签</li>
</ol>
<h2 id="HTML5新增的多媒体标签"><a href="#HTML5新增的多媒体标签" class="headerlink" title="HTML5新增的多媒体标签"></a>HTML5新增的多媒体标签</h2><p>使用<code>audio</code>或<code>video</code>可以很方便的在页面中嵌入音频和视频，而不再去使用flash和其他浏览器插件。</p>
<h3 id="视频-video"><a href="#视频-video" class="headerlink" title="视频:video"></a>视频:<code>video</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">video</span> <span class="attribute">width</span>=&quot;<span class="number">320</span>&quot; <span class="attribute">height</span>=&quot;<span class="number">240</span>&quot; controls&gt;</span><br><span class="line">    &lt;source <span class="attribute">src</span>=&quot;movie<span class="selector-class">.mp4</span>&quot; type=&quot;<span class="selector-tag">video</span>/mp4&quot;&gt;</span><br><span class="line">    &lt;source <span class="attribute">src</span>=&quot;movie<span class="selector-class">.ogg</span>&quot; type=&quot;<span class="selector-tag">video</span>/ogg&quot;&gt;</span><br><span class="line">    您的浏览器不支持 <span class="selector-tag">video</span> 标签。</span><br><span class="line">&lt;/<span class="selector-tag">video</span>&gt;</span><br></pre></td></tr></table></figure>
<p>常见属性：<br>| 属性       | 值                                    | 描述                                                        |<br>| ———- | ————————————- | ———————————————————– |<br>| <code>autoplay</code> | <code>autoplay</code>                            | 视频就绪自动播放(谷歌浏览器需要添加muted来解决自动播放问题) |<br>| <code>controls</code> | <code>controls</code>                            | 向用户显示播放控件                                          |<br>| <code>width</code>    | 像素                                  | 设置播放器宽度                                              |<br>| <code>height</code>   | 像素                                  | 设置播放器高度                                              |<br>| <code>loop</code>     | <code>loop</code>                                | 循环播放吗                                                  |<br>| <code>preload</code>  | audo(预先加载视频）none(不应加载视频) | 规定是否加载视频(如果有autoplay就忽略该属性)                |<br>| <code>src</code>      | <code>url</code>                                 | 视频url地址                                                 |<br>| <code>poster</code>   | <code>Imgurl</code>                              | 加载等待的画面图片                                          |<br>| <code>muted</code>    | <code>muted</code>                               | 静音播放                                                    |</p>
<h3 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频:audio"></a>音频:<code>audio</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">audio</span> controls loop&gt;</span><br><span class="line">  &lt;source <span class="attribute">src</span>=&quot;horse<span class="selector-class">.ogg</span>&quot; type=&quot;<span class="selector-tag">audio</span>/ogg&quot;&gt;</span><br><span class="line">  &lt;source <span class="attribute">src</span>=&quot;horse<span class="selector-class">.mp3</span>&quot; type=&quot;<span class="selector-tag">audio</span>/mpeg&quot;&gt;</span><br><span class="line">  您的浏览器不支持 <span class="selector-tag">audio</span> 元素。</span><br><span class="line">&lt;/<span class="selector-tag">audio</span>&gt;</span><br></pre></td></tr></table></figure>
<p>常见属性：<br>| 属性       | 值         | 描述                  |<br>| ———- | ———- | ——————— |<br>| <code>autoplay</code> | <code>autoplay</code> | 自动播放              |<br>| <code>controls</code> | <code>controls</code> | 显示控件              |<br>| <code>loop</code>     | <code>loop</code>     | 循环播放              |<br>| <code>src</code>      | <code>url</code>      | 要播放的音频的url路径 |</p>
<h2 id="HTML5新增的input类型"><a href="#HTML5新增的input类型" class="headerlink" title="HTML5新增的input类型"></a>HTML5新增的input类型</h2><table>
<thead>
<tr>
<th>type类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>email</code></td>
<td>限制用户输入必须是<code>Email</code>类型</td>
</tr>
<tr>
<td><code>url</code></td>
<td>限制用户输入必须是<code>Url</code>类型</td>
</tr>
<tr>
<td><code>date</code></td>
<td>限制用户输入必须是<code>日期</code>类型</td>
</tr>
<tr>
<td><code>time</code></td>
<td>限制用户输入必须是<code>时间</code>类型</td>
</tr>
<tr>
<td><code>month</code></td>
<td>限制用户输入必须是<code>月</code>类型</td>
</tr>
<tr>
<td><code>week</code></td>
<td>限制用户输入必须是<code>周</code>类型</td>
</tr>
<tr>
<td><code>number</code></td>
<td>限制用户输入必须是<code>数字</code>类型</td>
</tr>
<tr>
<td><code>tel</code></td>
<td>手机号码</td>
</tr>
<tr>
<td><code>search</code></td>
<td>搜索框</td>
</tr>
<tr>
<td><code>color</code></td>
<td>生成一个颜色选择表单</td>
</tr>
</tbody></table>
<h2 id="HTML5新增的表单属性"><a href="#HTML5新增的表单属性" class="headerlink" title="HTML5新增的表单属性"></a>HTML5新增的表单属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>required</code></td>
<td><code>required</code></td>
<td>表单拥有该属性表示内容不能为空，必须填写</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>提示文本</td>
<td>表单的提示信息</td>
</tr>
<tr>
<td><code>autofocus</code></td>
<td><code>autofocus</code></td>
<td>自动聚焦属性。页面打开后自动聚焦到指定表单</td>
</tr>
<tr>
<td><code>autocomplete</code></td>
<td><code>off / on</code></td>
<td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项</td>
</tr>
<tr>
<td><code>multiple</code></td>
<td><code>multiple</code></td>
<td>可以多选文件提交</td>
</tr>
</tbody></table>
<h1 id="查阅文档"><a href="#查阅文档" class="headerlink" title="查阅文档"></a>查阅文档</h1><p>经常查阅文档是一个非常好的学习习惯<br>推荐网站:<br><a href="https://www.baidu.com/">百度</a><br><a href="https://www.w3school.com.cn/">W3C</a><br><a href="https://developer.mozilla.org/zh-CN/">MDN</a></p>
<h1 id="SEO-搜索引擎优化"><a href="#SEO-搜索引擎优化" class="headerlink" title="SEO(搜索引擎优化)"></a>SEO(搜索引擎优化)</h1><p>SEO汉译为“搜索引擎优化”，是一种利用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式。<br>SEO的目的是“对网站进行深度的优化”，从而帮助网站获取免费的流量，进而在搜索引擎上提升网站的排名，提高网站的知名度。</p>
<h2 id="lang语言种类-1"><a href="#lang语言种类-1" class="headerlink" title="lang语言种类"></a>lang语言种类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="alt属性"><a href="#alt属性" class="headerlink" title="alt属性"></a>alt属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;img/banner1.png&quot; alt=&quot;SEO优化&quot;</span><br></pre></td></tr></table></figure>
<h2 id="TDK三大标签SEO优化"><a href="#TDK三大标签SEO优化" class="headerlink" title="TDK三大标签SEO优化"></a>TDK三大标签SEO优化</h2><p>页面必须有三个标签用来符合SEO优化<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2021-03-08_19-45-14.png" alt="Snipaste_2021-03-08_19-45-14"></p>
<h3 id="title网站标题"><a href="#title网站标题" class="headerlink" title="title网站标题"></a>title网站标题</h3><p>title具有不可替代性，使我们内页的第一个重要标签，是搜索引擎了解网页的入口和对网页主体归属的最佳判断点。<br>建议：<span style="color:red;">网站名(产品名) —&gt; 网站的介绍(尽量不要超过30个汉字)</span>，例如：</p>
<ol>
<li>京东(jd.com)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</li>
<li>小米商城-小米5s、红米Note4、小米MIX、小米笔记本官方网站<h3 id="description网站说明"><a href="#description网站说明" class="headerlink" title="description网站说明"></a>description网站说明</h3>简要说明我们网站主要是做什么的<br>我们提倡，description作为网站的总体业务和主体概括，多采用“我们是…”、“我们提供…”、“xxx网作为…”、“电话：010…”之类的语句。例如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;京东JD.COM-专业的综合网上购物商城，销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品。快捷、诚信的服务，为您提供愉悦的网上购物体验！&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="keywords关键字"><a href="#keywords关键字" class="headerlink" title="keywords关键字"></a>keywords关键字</h3>keywords是页面关键词，是搜索引擎的关注点之一。<br>keywords最好限制为6~8个关键词，关键词之间用英文”,”隔开，采用<code>关键词1,关键词2,...</code>的形式。例如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东&quot; /&gt;</span><br></pre></td></tr></table></figure>
而对于我们前端人员来说，我们只需要准备好这三个标签，具体内容是由专门的SEO人员准备。<h2 id="关于logo的SEO优化"><a href="#关于logo的SEO优化" class="headerlink" title="关于logo的SEO优化"></a>关于logo的SEO优化</h2></li>
<li>logo里面首先放一个<code>h1</code>标签，目的是为了提权，告诉搜索引擎，这个地方很重要</li>
<li>h1里面再放一个<code>链接</code>，可以返回首页，把logo的背景图片给链接即可。</li>
<li>为了搜索引擎收录我们，我们链接里面要放文字(网站名称)，但是文字不要显示出来<ul>
<li>方法1：<code>text-indext</code>移动到盒子外面<code>text-indext: -9999px;</code>，然后<code>overflow:hidden;</code>，淘宝的做法</li>
<li>方法2：直接给<code>font-size: 0;</code>就看不到文字了，京东的做法</li>
</ul>
</li>
<li>最后给链接一个<code>title</code>属性，这样鼠标放到logo上就可以看到提示文字了<h2 id="关于favicon图标"><a href="#关于favicon图标" class="headerlink" title="关于favicon图标"></a>关于favicon图标</h2><code>favicon.ico</code>一般用于作为缩略的网站标志，它显示在浏览器的地址栏或者标签上。<br>目前主要的浏览器都支持<code>favicon.ico</code>图标。<br><img src="https://gitee.com/hei_girls/blogimgs/raw/master/HTML/%E9%BB%91%E9%A9%ACPINK%E8%80%81%E5%B8%88/Snipaste_2021-03-08_20-11-36.png" alt="Snipaste_2021-03-08_20-11-36"><h3 id="制作favicon图标"><a href="#制作favicon图标" class="headerlink" title="制作favicon图标"></a>制作favicon图标</h3></li>
<li>打开<a href="http://www.bitbug.net/">比特虫</a>，上传图片验证即可。</li>
<li><code>favicon</code>图标放到网站根目录下</li>
<li>HTML页面引入<code>favicon</code>图标</li>
<li>引用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; /&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端体系与前后端分离认知</title>
    <url>/2021/02/20/%E5%89%8D%E7%AB%AF%E4%BD%93%E7%B3%BB%E4%B8%8E%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%AE%A4%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文旨在记录一下我对于前后端分类发展历史进行归纳与总结，有不对的地方，希望能够指出，大家共同进步。本文供我在以后的使用中能够快速学习和参考同时也希望能够给大家带来帮助。</p>
<span id="more"></span>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Vue</code>是一套用于构建用户界面的<strong>渐进式框架</strong>，发布于<code>2014年2月</code>。与其他大型框架不同的是，<code>Vue</code>被设计为可以自底层向上逐层应用。**<code>Vue</code>的核心库只关注视图层**，不仅易于上手，还便于与第三方库(如：<code>vue-router:跳转</code>、<code>vue-resource:通信</code>、<code>vuex:管理</code>)或既有项目整合。<br><code>Vue</code>只负责：<code>HTML+CSS+JS</code><br>网络通信：<code>axios</code><br>页面跳转：<code>vue-router</code><br>状态管理：<code>vuex</code><br><a href="https://cn.vuejs.org/">官网</a><br><strong>Vue-ui框架：</strong><br><a href="https://ice.work/">飞冰</a><br><a href="https://element.eleme.cn/#/zh-CN">ElementUI</a><br><a href="https://weapp.iviewui.com/">iView</a><br><a href="https://iview.github.io/">iview</a></p>
<h1 id="前端知识体系"><a href="#前端知识体系" class="headerlink" title="前端知识体系"></a>前端知识体系</h1><p>想要成为真正的”互联网全栈工程师”还有很长的一段路要走，其中”大前端”是 绕不开的一门必修课。本阶段课程的主要目的就是带领我们认识前端、了解前端、掌握前端，为实现称为”全栈工程师”再向前迈进一步。</p>
<h2 id="前端三要素"><a href="#前端三要素" class="headerlink" title="前端三要素"></a>前端三要素</h2><ol>
<li><code>HTML(结构)：</code>超文本标记语言，决定网页的结构和内容</li>
<li><code>CSS(表现)：</code>层叠样式表，设定网页的表现样式</li>
<li><code>JavaScript(行为)：</code>是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行，用于控制网页的行为，网站的交互效果<h2 id="结构层-HTML"><a href="#结构层-HTML" class="headerlink" title="结构层(HTML)"></a>结构层(HTML)</h2>各种标签等…<h2 id="表现层-CSS"><a href="#表现层-CSS" class="headerlink" title="表现层(CSS)"></a>表现层(CSS)</h2><code>css层叠样式表</code>是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，换句话说就是不具备任何语法支持，它主要有如下的缺陷：</li>
</ol>
<ul>
<li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器。</li>
<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。<br>这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称为<strong>CSS预处理器</strong>的工具，提供CSS缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。大大提高了前端在样式上的开发效率。</li>
</ul>
<p><strong>什么是CSS预处理器：</strong><br>CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为css增加了一些编程的特性，将css作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码工作。转换成通俗易懂的话来说就是：”<strong>用一种专门的编程语言，进行Web页面样式设计，再通过编译器转化为正常的css文件，以供项目使用。</strong>“<br><strong>常用的CSS预处理器有：</strong></p>
<ul>
<li>**<code>SASS:</code>**基于<code>Ruby</code>开发，通过服务器端处理，功能强大。解析效率高。需要学习<code>Ruby语言</code>，上手难度高于<code>LESS</code>。</li>
<li>**<code>LESS：</code>**基于<code>NodeJS</code>开发，通过客户端处理、使用简单。功能比<code>SASS</code>简单，解析效率也低于<code>SASS</code>，但在实际开发中足够了。<h2 id="行为层-JavaScript"><a href="#行为层-JavaScript" class="headerlink" title="行为层(JavaScript)"></a>行为层(<code>JavaScript</code>)</h2><code>JavaScript</code>是一门弱类型脚本语言，其源代码在发往客户端运行之前不需经过编译，而是将文本格式的字符代码发送给浏览器，由浏览器解释运行。</li>
</ul>
<p><strong>Native原生JS开发：</strong><br>原生JS开发，也就是让我们按照**<code>ECMAScript</code>**标准的开发方式，简称是<code>ES</code>，特点是所有浏览器都支持。目前<code>ES</code>标准已发布如下版本：</p>
<ul>
<li><code>ES3</code></li>
<li><code>ES4</code>：内部未正式发布</li>
<li><code>ES5</code>：全浏览器都支持，目前主流使用</li>
<li><code>ES6</code>：常用，当前主流版本：使用<code>webpack打包成为ES5支持</code></li>
<li><code>ES7</code>：新增了<code>async、await</code>异步函数的处理等</li>
<li><code>ES8</code></li>
<li><code>ES9</code></li>
<li><code>ES10</code></li>
<li><code>ES11</code><br>区别就是逐步增加了新特性。<h3 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a><code>JavaScript框架</code></h3></li>
<li><code>jQuery：</code>大家熟知的<code>JavaScript</code>框架。优点是简化了<code>DOM</code>的操作。缺点是<code>DOM</code>操作太繁琐，影响前端性能。在前端眼里使用它仅仅是为了兼容<code>IE6、7、8</code>低版本浏览器。</li>
<li><code>Angular</code>：<code>Google</code>收购的前端框架，由一群<code>Java</code>程序员开发，其特点是将后台的<code>MVC</code>模式搬到了前端并增加了<strong>模块化开发</strong>的理念。</li>
<li><code>React</code>：<code>Facebook</code>出品，一款高性能的<code>JavaScript</code>前端框架。特点是提出了新概念**[虚拟DOM]<strong>用于减少真实<code>DOM</code>操作，在内存中模拟<code>DOM</code>操作，有效的提升了前端渲染效率。缺点是使用复杂，因为需要额外学习一门</strong>[<code>JSX</code>]**语言。</li>
<li><code>Vue：</code>一款渐进式<code>JavaScript</code>框架。所谓渐进式就是逐步实现新特性的意思。如实现模块化开发、路由、状态管理等新特性。其特点是综合了<code>Angular(模块化)和React(虚拟DOM)</code>的优点。</li>
<li><code>Axios：</code>前端通信框架。因为<code>Vue</code>的边界很明确，就是为了处理<code>DOM</code>，所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互。当然也可以直接选择使用<code>jQuery</code>提供的<code>Ajax</code>通信功能。但是<code>Axios</code>要比<code>jQuery</code>体积更小，运行更快。<h3 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a><code>UI框架</code></h3></li>
<li><code>Ant-Design：</code>阿里巴巴出品，基于<code>React</code>的UI框架</li>
<li><code>ElementUI、iview、ice：</code>饿了么出品，基于<code>Vue</code>的UI框架</li>
<li><code>Bootstrap：``Twitter</code>推出的一个应用于前端开发的开源工具包</li>
<li><code>AmazeUI：</code>又叫”<code>妹子UI</code>“，一款<code>HTML5</code>跨屏前端框架<h3 id="JavaScript构建工具"><a href="#JavaScript构建工具" class="headerlink" title="JavaScript构建工具"></a><code>JavaScript</code>构建工具</h3></li>
<li><code>Babel：</code>一种JS编译工具，主要用于浏览器不支持的<code>ES</code>新特性。比如用于编译<code>TypeScript</code></li>
<li><code>WebPack：</code>模块打包器。主要作用是打包、压缩、合并、<code>ES6+</code>转换<code>ES5</code>语法及按序加载<h2 id="三端统一"><a href="#三端统一" class="headerlink" title="三端统一"></a>三端统一</h2><h3 id="混合开发-Hybrid-App"><a href="#混合开发-Hybrid-App" class="headerlink" title="混合开发(Hybrid App)"></a>混合开发(Hybrid App)</h3>主要目的是实现一套代码三端统一（PC、Android：.apk、IOS：.ipa）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</li>
<li><strong>云打包：</strong><code>HBuild---&gt; HBuildX, DCloud出品：API Cloud</code></li>
<li><strong>本地打包：</strong><code>Cordova</code><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3>详见微信官网，这里就是介绍一个方便微信小程序UI开发的框架：<a href="https://weui.io/">WeUI</a><h2 id="后端技术"><a href="#后端技术" class="headerlink" title="后端技术"></a>后端技术</h2>前端人员为了方便开发也需要掌握一定的后端技术，但使用<code>Java</code>后台人员知道后台知识体系及其庞大复杂。所以为了方便前端人员开发后台应用，就出现了<code>NodeJS</code>这样的技术。<br>既然是后台技术，那肯定也需要框架和项目管理器工具，<code>NodeJS</code>框架及项目管理工具如下：</li>
<li><code>Express</code>：<code>NodeJS框架</code></li>
<li><code>Koa</code>：<code>Express简化版</code></li>
<li><code>NPM</code>：项目综合管理工具，类似于<code>Java中的Maven</code></li>
<li><code>YARN</code>：<code>NPM的代替方案，</code>类似于<code>Java中的Maven和Gradle的关系</code><h2 id="Vue中的UI库"><a href="#Vue中的UI库" class="headerlink" title="Vue中的UI库"></a>Vue中的UI库</h2></li>
</ul>
<ol>
<li><a href="https://iview.github.io/">iview</a><br><code>iView</code> 是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC 界面的中后台产品。主要特点是**<code>移动端</code>**支持较多。</li>
<li><a href="https://element.eleme.cn/#/zh-CN">Element-ui</a><br><code>Element</code>是饿了么前端开源维护的<code>VueUI</code>组件库。主要用于<code>PC端</code>的页面开发。</li>
<li><a href="https://youzan.github.io/vant/#/zh-CN/">VantUI</a><br><code>Vant UI</code>是有赞前端团队基于有赞统一的规范实现的<code>Vue</code>组件库。提供了一整套UI基础组件和业务组件。通过<code>Vant</code>，可以快速搭建出风格统一的页面，提升开发效率。</li>
<li>等等….<h1 id="了解前后端分离的演变历史"><a href="#了解前后端分离的演变历史" class="headerlink" title="了解前后端分离的演变历史"></a>了解前后端分离的演变历史</h1><h2 id="后端为主的MVC时代"><a href="#后端为主的MVC时代" class="headerlink" title="后端为主的MVC时代"></a>后端为主的<code>MVC</code>时代</h2><img src="https://z3.ax1x.com/2021/05/31/2ZriO1.png" alt="说明"><h2 id="大前端时代-前端为主的MV-时代"><a href="#大前端时代-前端为主的MV-时代" class="headerlink" title="大前端时代-前端为主的MV*时代"></a>大前端时代-前端为主的<code>MV*</code>时代</h2>此处的<code>MV*</code>模式如下：</li>
</ol>
<ul>
<li><code>MVC(同步通信为主)</code>：<code>Model</code>、<code>View</code>、<code>Controller</code></li>
<li><code>MVP(异步通信为主)</code>：<code>Model</code>、<code>View</code>、<code>Presenter</code></li>
<li><code>MVVM(异步通信为主)</code>：<code>Model</code>、<code>View</code>、<code>ViewModel</code><br>为了降低前端开发复杂度，涌现了大量的前端框架，比如：<code>AngularJS</code>、<code>React</code>、<code>Vue.js</code>、<code>EmberJS</code>等，这些框架总的原则是先按类型分层，比如：<code>Templates</code>、<code>Controllers</code>、<code>Models</code>，然后再在层内做切分。如下图：<br><img src="https://z3.ax1x.com/2021/05/31/2ZrCl9.png" alt="说明"></li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li><strong>前后端职责很清晰：</strong>前端工作在浏览器端，后端工作在服务器端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理。</li>
<li><strong>前端开发的复杂度可控：</strong>前端代码很重，但合理的分层，让前端代码能各司其职。</li>
<li><strong>部署相对独立：</strong>可以快速改进产品体验。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li>
<li>全异步，对<code>SEO优化</code>不利。往往还需要服务端做同步渲染的降低方案。</li>
<li>性能并非最佳。特别是移动互联网环境下。</li>
<li><code>SPA</code>不能满足所有需求，依旧存在大量多页面应用。<h2 id="NodeJS带来的全栈时代"><a href="#NodeJS带来的全栈时代" class="headerlink" title="NodeJS带来的全栈时代"></a><code>NodeJS</code>带来的全栈时代</h2>前端为主的<code>MV*</code>模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着<code>NodeJS</code>的兴起，<code>JavaScript</code>开始有能力运行在服务器端。这意味着可以有一种新的研发模式：<br><img src="https://z3.ax1x.com/2021/05/31/2ZrPyR.png" alt="说明"><br>在这种研发模式下，前后端的职责很清晰。对前端来说，两个<code>UI</code>层各司其职：</li>
<li><code>Front-end UI layer</code>处理浏览器层的展现逻辑。通过<code>CSS</code>渲染样式，通过<code>JavaScript</code>添加交互功能，<code>HTML</code>的生成也可以放在这层。</li>
<li><code>Back-end UI layer</code>处理路由、模板、数据获取、<code>Cookie</code>等。通过路由，前端终于可以自主把控<code>URL Design</code>，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心与业务逻辑层的开发。<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>综上所述，模式也好，技术也罢，没有好坏优劣之分，只有适合于不适合。前后端分离的开发思想主要是基于<code>SOC</code>(关注度分离原则)，上面种种模式，都是让前后端的职责更清晰，分工更合理高效。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>后端</tag>
      </tags>
  </entry>
</search>
